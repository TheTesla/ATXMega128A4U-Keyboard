
KEYBOARD_EXAMPLE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  00001e30  00001ec4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  008020c0  008020c0  00001f84  2**2
                  ALLOC
  3 .stab         00000798  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002827  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004a8  00000000  00000000  00002858  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007421  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ba9  00000000  00000000  0000a121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006bd8  00000000  00000000  0000bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bec  00000000  00000000  000128a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002a9fd  00000000  00000000  00013490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003344  00000000  00000000  0003de8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000478  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a465  00000000  00000000  00041650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_125>
     1f8:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_126>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e0 e3       	ldi	r30, 0x30	; 48
     21c:	fe e1       	ldi	r31, 0x1E	; 30
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 3c       	cpi	r26, 0xC0	; 192
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a0 ec       	ldi	r26, 0xC0	; 192
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 38       	cpi	r26, 0x88	; 136
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <main>
     244:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <ui_init>:
 */

#include <asf.h>
#include "ui.h"

void ui_init(void){}
     24a:	08 95       	ret

0000024c <ui_powerdown>:
void ui_powerdown(void){}
     24c:	08 95       	ret

0000024e <ui_wakeup_enable>:
void ui_wakeup_enable(void){}
     24e:	08 95       	ret

00000250 <ui_wakeup_disable>:
void ui_wakeup_disable(void){}
     250:	08 95       	ret

00000252 <ui_wakeup>:

void ui_wakeup(void){}
     252:	08 95       	ret

00000254 <ui_process>:

void ui_process(uint16_t framenumber)
{
	static int32_t i = 0;
	i+=1;
     254:	80 91 c0 20 	lds	r24, 0x20C0
     258:	90 91 c1 20 	lds	r25, 0x20C1
     25c:	a0 91 c2 20 	lds	r26, 0x20C2
     260:	b0 91 c3 20 	lds	r27, 0x20C3
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	a1 1d       	adc	r26, r1
     268:	b1 1d       	adc	r27, r1
     26a:	80 93 c0 20 	sts	0x20C0, r24
     26e:	90 93 c1 20 	sts	0x20C1, r25
     272:	a0 93 c2 20 	sts	0x20C2, r26
     276:	b0 93 c3 20 	sts	0x20C3, r27
	
	switch(i){
     27a:	8c 33       	cpi	r24, 0x3C	; 60
     27c:	91 05       	cpc	r25, r1
     27e:	a1 05       	cpc	r26, r1
     280:	b1 05       	cpc	r27, r1
     282:	09 f4       	brne	.+2      	; 0x286 <ui_process+0x32>
     284:	5b c0       	rjmp	.+182    	; 0x33c <ui_process+0xe8>
     286:	f4 f4       	brge	.+60     	; 0x2c4 <ui_process+0x70>
     288:	8e 31       	cpi	r24, 0x1E	; 30
     28a:	91 05       	cpc	r25, r1
     28c:	a1 05       	cpc	r26, r1
     28e:	b1 05       	cpc	r27, r1
     290:	09 f4       	brne	.+2      	; 0x294 <ui_process+0x40>
     292:	48 c0       	rjmp	.+144    	; 0x324 <ui_process+0xd0>
     294:	5c f4       	brge	.+22     	; 0x2ac <ui_process+0x58>
     296:	8a 30       	cpi	r24, 0x0A	; 10
     298:	91 05       	cpc	r25, r1
     29a:	a1 05       	cpc	r26, r1
     29c:	b1 05       	cpc	r27, r1
     29e:	d1 f1       	breq	.+116    	; 0x314 <ui_process+0xc0>
     2a0:	44 97       	sbiw	r24, 0x14	; 20
     2a2:	a1 05       	cpc	r26, r1
     2a4:	b1 05       	cpc	r27, r1
     2a6:	09 f0       	breq	.+2      	; 0x2aa <ui_process+0x56>
     2a8:	69 c0       	rjmp	.+210    	; 0x37c <ui_process+0x128>
     2aa:	38 c0       	rjmp	.+112    	; 0x31c <ui_process+0xc8>
     2ac:	88 32       	cpi	r24, 0x28	; 40
     2ae:	91 05       	cpc	r25, r1
     2b0:	a1 05       	cpc	r26, r1
     2b2:	b1 05       	cpc	r27, r1
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <ui_process+0x64>
     2b6:	3a c0       	rjmp	.+116    	; 0x32c <ui_process+0xd8>
     2b8:	c2 97       	sbiw	r24, 0x32	; 50
     2ba:	a1 05       	cpc	r26, r1
     2bc:	b1 05       	cpc	r27, r1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <ui_process+0x6e>
     2c0:	5d c0       	rjmp	.+186    	; 0x37c <ui_process+0x128>
     2c2:	38 c0       	rjmp	.+112    	; 0x334 <ui_process+0xe0>
     2c4:	8a 35       	cpi	r24, 0x5A	; 90
     2c6:	91 05       	cpc	r25, r1
     2c8:	a1 05       	cpc	r26, r1
     2ca:	b1 05       	cpc	r27, r1
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <ui_process+0x7c>
     2ce:	42 c0       	rjmp	.+132    	; 0x354 <ui_process+0x100>
     2d0:	6c f4       	brge	.+26     	; 0x2ec <ui_process+0x98>
     2d2:	86 34       	cpi	r24, 0x46	; 70
     2d4:	91 05       	cpc	r25, r1
     2d6:	a1 05       	cpc	r26, r1
     2d8:	b1 05       	cpc	r27, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <ui_process+0x8a>
     2dc:	33 c0       	rjmp	.+102    	; 0x344 <ui_process+0xf0>
     2de:	80 35       	cpi	r24, 0x50	; 80
     2e0:	91 05       	cpc	r25, r1
     2e2:	a1 05       	cpc	r26, r1
     2e4:	b1 05       	cpc	r27, r1
     2e6:	09 f0       	breq	.+2      	; 0x2ea <ui_process+0x96>
     2e8:	49 c0       	rjmp	.+146    	; 0x37c <ui_process+0x128>
     2ea:	30 c0       	rjmp	.+96     	; 0x34c <ui_process+0xf8>
     2ec:	8e 36       	cpi	r24, 0x6E	; 110
     2ee:	91 05       	cpc	r25, r1
     2f0:	a1 05       	cpc	r26, r1
     2f2:	b1 05       	cpc	r27, r1
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <ui_process+0xa4>
     2f6:	36 c0       	rjmp	.+108    	; 0x364 <ui_process+0x110>
     2f8:	84 3f       	cpi	r24, 0xF4	; 244
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	92 07       	cpc	r25, r18
     2fe:	a1 05       	cpc	r26, r1
     300:	b1 05       	cpc	r27, r1
     302:	09 f4       	brne	.+2      	; 0x306 <ui_process+0xb2>
     304:	33 c0       	rjmp	.+102    	; 0x36c <ui_process+0x118>
     306:	84 36       	cpi	r24, 0x64	; 100
     308:	91 05       	cpc	r25, r1
     30a:	a1 05       	cpc	r26, r1
     30c:	b1 05       	cpc	r27, r1
     30e:	09 f0       	breq	.+2      	; 0x312 <ui_process+0xbe>
     310:	35 c0       	rjmp	.+106    	; 0x37c <ui_process+0x128>
     312:	24 c0       	rjmp	.+72     	; 0x35c <ui_process+0x108>
		case 10:
		udi_hid_kbd_down(HID_H);
     314:	8b e0       	ldi	r24, 0x0B	; 11
     316:	b4 d1       	rcall	.+872    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_H);
     318:	8b e0       	ldi	r24, 0x0B	; 11
		break;
     31a:	80 c1       	rjmp	.+768    	; 0x61c <udi_hid_kbd_up>
		case 20:
		udi_hid_kbd_down(HID_A);
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	b0 d1       	rcall	.+864    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_A);
     320:	84 e0       	ldi	r24, 0x04	; 4
		break;
     322:	7c c1       	rjmp	.+760    	; 0x61c <udi_hid_kbd_up>
		case 30:
		udi_hid_kbd_down(HID_L);
     324:	8f e0       	ldi	r24, 0x0F	; 15
     326:	ac d1       	rcall	.+856    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_L);
     328:	8f e0       	ldi	r24, 0x0F	; 15
		break;
     32a:	78 c1       	rjmp	.+752    	; 0x61c <udi_hid_kbd_up>
		case 40:
		udi_hid_kbd_down(HID_L);
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	a8 d1       	rcall	.+848    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_L);
     330:	8f e0       	ldi	r24, 0x0F	; 15
		break;
     332:	74 c1       	rjmp	.+744    	; 0x61c <udi_hid_kbd_up>
		case 50:
		udi_hid_kbd_down(HID_O);
     334:	82 e1       	ldi	r24, 0x12	; 18
     336:	a4 d1       	rcall	.+840    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_O);
     338:	82 e1       	ldi	r24, 0x12	; 18
		break;
     33a:	70 c1       	rjmp	.+736    	; 0x61c <udi_hid_kbd_up>
		case 60:
		udi_hid_kbd_down(HID_SPACEBAR);
     33c:	8c e2       	ldi	r24, 0x2C	; 44
     33e:	a0 d1       	rcall	.+832    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_SPACEBAR);
     340:	8c e2       	ldi	r24, 0x2C	; 44
		break;
     342:	6c c1       	rjmp	.+728    	; 0x61c <udi_hid_kbd_up>
		case 70:
		udi_hid_kbd_down(HID_W);
     344:	8a e1       	ldi	r24, 0x1A	; 26
     346:	9c d1       	rcall	.+824    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_W);
     348:	8a e1       	ldi	r24, 0x1A	; 26
		break;
     34a:	68 c1       	rjmp	.+720    	; 0x61c <udi_hid_kbd_up>
		case 80:
		udi_hid_kbd_down(HID_E);
     34c:	88 e0       	ldi	r24, 0x08	; 8
     34e:	98 d1       	rcall	.+816    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_E);
     350:	88 e0       	ldi	r24, 0x08	; 8
		break;
     352:	64 c1       	rjmp	.+712    	; 0x61c <udi_hid_kbd_up>
		case 90:
		udi_hid_kbd_down(HID_L);
     354:	8f e0       	ldi	r24, 0x0F	; 15
     356:	94 d1       	rcall	.+808    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_L);
     358:	8f e0       	ldi	r24, 0x0F	; 15
		break;
     35a:	60 c1       	rjmp	.+704    	; 0x61c <udi_hid_kbd_up>
		case 100:
		udi_hid_kbd_down(HID_T);
     35c:	87 e1       	ldi	r24, 0x17	; 23
     35e:	90 d1       	rcall	.+800    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_T);
     360:	87 e1       	ldi	r24, 0x17	; 23
		break;
     362:	5c c1       	rjmp	.+696    	; 0x61c <udi_hid_kbd_up>
		case 110:
		udi_hid_kbd_down(HID_ENTER);
     364:	88 e2       	ldi	r24, 0x28	; 40
     366:	8c d1       	rcall	.+792    	; 0x680 <udi_hid_kbd_down>
		udi_hid_kbd_up(HID_ENTER);
     368:	88 e2       	ldi	r24, 0x28	; 40
		break;		case 500:
     36a:	58 c1       	rjmp	.+688    	; 0x61c <udi_hid_kbd_up>
		i = 0;
     36c:	10 92 c0 20 	sts	0x20C0, r1
     370:	10 92 c1 20 	sts	0x20C1, r1
     374:	10 92 c2 20 	sts	0x20C2, r1
     378:	10 92 c3 20 	sts	0x20C3, r1
     37c:	08 95       	ret

0000037e <ui_kbd_led>:
	}

}

void ui_kbd_led(uint8_t value)
{
     37e:	08 95       	ret

00000380 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <sysclk_init+0xa>
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	80 93 70 00 	sts	0x0070, r24
     396:	80 93 71 00 	sts	0x0071, r24
     39a:	80 93 72 00 	sts	0x0072, r24
     39e:	80 93 73 00 	sts	0x0073, r24
     3a2:	80 93 74 00 	sts	0x0074, r24
     3a6:	80 93 75 00 	sts	0x0075, r24
     3aa:	80 93 76 00 	sts	0x0076, r24
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	81 e4       	ldi	r24, 0x41	; 65
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	82 d6       	rcall	.+3332   	; 0x10ba <ccp_write_io>
     3b6:	6c e1       	ldi	r22, 0x1C	; 28
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	84 d6       	rcall	.+3336   	; 0x10c6 <nvm_read_byte>
     3be:	8a 83       	std	Y+2, r24	; 0x02
     3c0:	6d e1       	ldi	r22, 0x1D	; 29
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	7f d6       	rcall	.+3326   	; 0x10c6 <nvm_read_byte>
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	21 f4       	brne	.+8      	; 0x3da <sysclk_init+0x5a>
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	93 e2       	ldi	r25, 0x23	; 35
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	9a 83       	std	Y+2, r25	; 0x02
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	9c 83       	std	Y+4, r25	; 0x04
     3e2:	e0 e6       	ldi	r30, 0x60	; 96
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	82 83       	std	Z+2, r24	; 0x02
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	83 83       	std	Z+3, r24	; 0x03
     3ec:	8f b7       	in	r24, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	e0 e5       	ldi	r30, 0x50	; 80
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	90 81       	ld	r25, Z
     3f6:	92 60       	ori	r25, 0x02	; 2
     3f8:	90 83       	st	Z, r25
     3fa:	8f bf       	out	0x3f, r24	; 63
     3fc:	81 81       	ldd	r24, Z+1	; 0x01
     3fe:	81 ff       	sbrs	r24, 1
     400:	fd cf       	rjmp	.-6      	; 0x3fc <sysclk_init+0x7c>
     402:	8f b7       	in	r24, 0x3f	; 63
     404:	f8 94       	cli
     406:	00 e5       	ldi	r16, 0x50	; 80
     408:	10 e0       	ldi	r17, 0x00	; 0
     40a:	d8 01       	movw	r26, r16
     40c:	16 96       	adiw	r26, 0x06	; 6
     40e:	9c 91       	ld	r25, X
     410:	16 97       	sbiw	r26, 0x06	; 6
     412:	99 7f       	andi	r25, 0xF9	; 249
     414:	16 96       	adiw	r26, 0x06	; 6
     416:	9c 93       	st	X, r25
     418:	16 97       	sbiw	r26, 0x06	; 6
     41a:	e0 e6       	ldi	r30, 0x60	; 96
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	90 e8       	ldi	r25, 0x80	; 128
     420:	95 83       	std	Z+5, r25	; 0x05
     422:	9b eb       	ldi	r25, 0xBB	; 187
     424:	96 83       	std	Z+6, r25	; 0x06
     426:	16 96       	adiw	r26, 0x06	; 6
     428:	9c 91       	ld	r25, X
     42a:	16 97       	sbiw	r26, 0x06	; 6
     42c:	94 60       	ori	r25, 0x04	; 4
     42e:	16 96       	adiw	r26, 0x06	; 6
     430:	9c 93       	st	X, r25
     432:	90 81       	ld	r25, Z
     434:	91 60       	ori	r25, 0x01	; 1
     436:	90 83       	st	Z, r25
     438:	8f bf       	out	0x3f, r24	; 63
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	3c d6       	rcall	.+3192   	; 0x10ba <ccp_write_io>
     442:	8f b7       	in	r24, 0x3f	; 63
     444:	f8 94       	cli
     446:	f8 01       	movw	r30, r16
     448:	90 81       	ld	r25, Z
     44a:	9e 7f       	andi	r25, 0xFE	; 254
     44c:	90 83       	st	Z, r25
     44e:	8f bf       	out	0x3f, r24	; 63
     450:	24 96       	adiw	r28, 0x04	; 4
     452:	cd bf       	out	0x3d, r28	; 61
     454:	de bf       	out	0x3e, r29	; 62
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <sysclk_enable_module>:
     460:	9f b7       	in	r25, 0x3f	; 63
     462:	f8 94       	cli
     464:	e8 2f       	mov	r30, r24
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	e0 59       	subi	r30, 0x90	; 144
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	60 95       	com	r22
     46e:	80 81       	ld	r24, Z
     470:	68 23       	and	r22, r24
     472:	60 83       	st	Z, r22
     474:	9f bf       	out	0x3f, r25	; 63
     476:	08 95       	ret

00000478 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     478:	86 30       	cpi	r24, 0x06	; 6
     47a:	11 f4       	brne	.+4      	; 0x480 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     47c:	68 e1       	ldi	r22, 0x18	; 24
     47e:	01 c0       	rjmp	.+2      	; 0x482 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     480:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     482:	e0 e5       	ldi	r30, 0x50	; 80
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     488:	81 fd       	sbrc	r24, 1
     48a:	24 c0       	rjmp	.+72     	; 0x4d4 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     48c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     48e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     490:	90 81       	ld	r25, Z
     492:	92 60       	ori	r25, 0x02	; 2
     494:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     496:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     498:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     49a:	81 ff       	sbrs	r24, 1
     49c:	fd cf       	rjmp	.-6      	; 0x498 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     49e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     4a0:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     4a2:	a0 e5       	ldi	r26, 0x50	; 80
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	16 96       	adiw	r26, 0x06	; 6
     4a8:	9c 91       	ld	r25, X
     4aa:	16 97       	sbiw	r26, 0x06	; 6
     4ac:	99 7f       	andi	r25, 0xF9	; 249
     4ae:	16 96       	adiw	r26, 0x06	; 6
     4b0:	9c 93       	st	X, r25
     4b2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     4b4:	e0 e6       	ldi	r30, 0x60	; 96
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	90 e8       	ldi	r25, 0x80	; 128
     4ba:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     4bc:	9b eb       	ldi	r25, 0xBB	; 187
     4be:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     4c0:	16 96       	adiw	r26, 0x06	; 6
     4c2:	9c 91       	ld	r25, X
     4c4:	16 97       	sbiw	r26, 0x06	; 6
     4c6:	94 60       	ori	r25, 0x04	; 4
     4c8:	16 96       	adiw	r26, 0x06	; 6
     4ca:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     4cc:	90 81       	ld	r25, Z
     4ce:	91 60       	ori	r25, 0x01	; 1
     4d0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d2:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     4d4:	63 60       	ori	r22, 0x03	; 3
     4d6:	84 e4       	ldi	r24, 0x44	; 68
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	ef d5       	rcall	.+3038   	; 0x10ba <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     4dc:	60 e4       	ldi	r22, 0x40	; 64
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	bf cf       	rjmp	.-130    	; 0x460 <sysclk_enable_module>

000004e2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     4e6:	fc 01       	movw	r30, r24
     4e8:	70 96       	adiw	r30, 0x10	; 16
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     4ee:	c6 2f       	mov	r28, r22
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	de 01       	movw	r26, r28
     4f4:	02 2e       	mov	r0, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <ioport_configure_port_pin+0x1a>
     4f8:	b5 95       	asr	r27
     4fa:	a7 95       	ror	r26
     4fc:	0a 94       	dec	r0
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <ioport_configure_port_pin+0x16>
     500:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     502:	50 83       	st	Z, r21
     504:	2f 5f       	subi	r18, 0xFF	; 255
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     50a:	28 30       	cpi	r18, 0x08	; 8
     50c:	31 05       	cpc	r19, r1
     50e:	89 f7       	brne	.-30     	; 0x4f2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     510:	40 ff       	sbrs	r20, 0
     512:	0a c0       	rjmp	.+20     	; 0x528 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     514:	41 ff       	sbrs	r20, 1
     516:	03 c0       	rjmp	.+6      	; 0x51e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     518:	fc 01       	movw	r30, r24
     51a:	65 83       	std	Z+5, r22	; 0x05
     51c:	02 c0       	rjmp	.+4      	; 0x522 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     51e:	fc 01       	movw	r30, r24
     520:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     522:	fc 01       	movw	r30, r24
     524:	61 83       	std	Z+1, r22	; 0x01
     526:	02 c0       	rjmp	.+4      	; 0x52c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     528:	fc 01       	movw	r30, r24
     52a:	62 83       	std	Z+2, r22	; 0x02
	}
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret

00000536 <udi_hid_kbd_setreport>:
     536:	30 91 7a 21 	lds	r19, 0x217A
     53a:	20 91 7b 21 	lds	r18, 0x217B
     53e:	82 2f       	mov	r24, r18
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	02 97       	sbiw	r24, 0x02	; 2
     544:	e1 f4       	brne	.+56     	; 0x57e <udi_hid_kbd_setreport+0x48>
     546:	31 11       	cpse	r19, r1
     548:	1c c0       	rjmp	.+56     	; 0x582 <udi_hid_kbd_setreport+0x4c>
     54a:	80 91 7e 21 	lds	r24, 0x217E
     54e:	90 91 7f 21 	lds	r25, 0x217F
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	c1 f4       	brne	.+48     	; 0x586 <udi_hid_kbd_setreport+0x50>
     556:	80 ed       	ldi	r24, 0xD0	; 208
     558:	90 e2       	ldi	r25, 0x20	; 32
     55a:	80 93 80 21 	sts	0x2180, r24
     55e:	90 93 81 21 	sts	0x2181, r25
     562:	87 ef       	ldi	r24, 0xF7	; 247
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	80 93 84 21 	sts	0x2184, r24
     56a:	90 93 85 21 	sts	0x2185, r25
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	80 93 82 21 	sts	0x2182, r24
     576:	90 93 83 21 	sts	0x2183, r25
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	08 95       	ret
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	08 95       	ret
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret

0000058a <udi_hid_kbd_send_report>:
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	80 91 c6 20 	lds	r24, 0x20C6
     592:	81 11       	cpse	r24, r1
     594:	18 c0       	rjmp	.+48     	; 0x5c6 <udi_hid_kbd_send_report+0x3c>
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	e7 ec       	ldi	r30, 0xC7	; 199
     59a:	f0 e2       	ldi	r31, 0x20	; 32
     59c:	a2 ed       	ldi	r26, 0xD2	; 210
     59e:	b0 e2       	ldi	r27, 0x20	; 32
     5a0:	01 90       	ld	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	8a 95       	dec	r24
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <udi_hid_kbd_send_report+0x16>
     5a8:	10 92 cf 20 	sts	0x20CF, r1
     5ac:	07 ee       	ldi	r16, 0xE7	; 231
     5ae:	12 e0       	ldi	r17, 0x02	; 2
     5b0:	28 e0       	ldi	r18, 0x08	; 8
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	42 ed       	ldi	r20, 0xD2	; 210
     5b6:	50 e2       	ldi	r21, 0x20	; 32
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	81 e8       	ldi	r24, 0x81	; 129
     5bc:	0e 94 40 0c 	call	0x1880	; 0x1880 <udd_ep_run>
     5c0:	80 93 c6 20 	sts	0x20C6, r24
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <udi_hid_kbd_send_report+0x3e>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <udi_hid_kbd_report_sent>:
     5ce:	10 92 c6 20 	sts	0x20C6, r1
     5d2:	80 91 cf 20 	lds	r24, 0x20CF
     5d6:	81 11       	cpse	r24, r1
     5d8:	d8 cf       	rjmp	.-80     	; 0x58a <udi_hid_kbd_send_report>
     5da:	08 95       	ret

000005dc <udi_hid_kbd_setup>:
     5dc:	2b e9       	ldi	r18, 0x9B	; 155
     5de:	32 e0       	ldi	r19, 0x02	; 2
     5e0:	46 e0       	ldi	r20, 0x06	; 6
     5e2:	50 e2       	ldi	r21, 0x20	; 32
     5e4:	65 ec       	ldi	r22, 0xC5	; 197
     5e6:	70 e2       	ldi	r23, 0x20	; 32
     5e8:	84 ec       	ldi	r24, 0xC4	; 196
     5ea:	90 e2       	ldi	r25, 0x20	; 32
     5ec:	74 c0       	rjmp	.+232    	; 0x6d6 <udi_hid_setup>

000005ee <udi_hid_kbd_setreport_valid>:
     5ee:	80 91 d0 20 	lds	r24, 0x20D0
     5f2:	c5 ce       	rjmp	.-630    	; 0x37e <ui_kbd_led>

000005f4 <udi_hid_kbd_disable>:
     5f4:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <main_kbd_disable>
     5f8:	08 95       	ret

000005fa <udi_hid_kbd_enable>:
     5fa:	10 92 c4 20 	sts	0x20C4, r1
     5fe:	10 92 c5 20 	sts	0x20C5, r1
     602:	10 92 c6 20 	sts	0x20C6, r1
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	e7 ec       	ldi	r30, 0xC7	; 199
     60a:	f0 e2       	ldi	r31, 0x20	; 32
     60c:	df 01       	movw	r26, r30
     60e:	1d 92       	st	X+, r1
     610:	8a 95       	dec	r24
     612:	e9 f7       	brne	.-6      	; 0x60e <udi_hid_kbd_enable+0x14>
     614:	10 92 cf 20 	sts	0x20CF, r1
     618:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <main_kbd_enable>

0000061c <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
     61c:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     61e:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     620:	f8 94       	cli

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
     622:	90 91 c9 20 	lds	r25, 0x20C9
     626:	99 23       	and	r25, r25
     628:	41 f0       	breq	.+16     	; 0x63a <udi_hid_kbd_up+0x1e>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
     62a:	98 17       	cp	r25, r24
     62c:	a9 f0       	breq	.+42     	; 0x658 <udi_hid_kbd_up+0x3c>
     62e:	ea ec       	ldi	r30, 0xCA	; 202
     630:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     632:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
     634:	21 91       	ld	r18, Z+
     636:	21 11       	cpse	r18, r1
     638:	02 c0       	rjmp	.+4      	; 0x63e <udi_hid_kbd_up+0x22>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     63a:	cf bf       	out	0x3f, r28	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
     63c:	1e c0       	rjmp	.+60     	; 0x67a <udi_hid_kbd_up+0x5e>
		}
		if (key_id == udi_hid_kbd_report[i])
     63e:	28 17       	cp	r18, r24
     640:	21 f0       	breq	.+8      	; 0x64a <udi_hid_kbd_up+0x2e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     642:	9f 5f       	subi	r25, 0xFF	; 255
     644:	98 30       	cpi	r25, 0x08	; 8
     646:	b1 f7       	brne	.-20     	; 0x634 <udi_hid_kbd_up+0x18>
     648:	05 c0       	rjmp	.+10     	; 0x654 <udi_hid_kbd_up+0x38>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     64a:	98 30       	cpi	r25, 0x08	; 8
     64c:	19 f0       	breq	.+6      	; 0x654 <udi_hid_kbd_up+0x38>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     64e:	97 30       	cpi	r25, 0x07	; 7
     650:	20 f0       	brcs	.+8      	; 0x65a <udi_hid_kbd_up+0x3e>
     652:	0c c0       	rjmp	.+24     	; 0x66c <udi_hid_kbd_up+0x50>
     654:	cf bf       	out	0x3f, r28	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
     656:	11 c0       	rjmp	.+34     	; 0x67a <udi_hid_kbd_up+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     658:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     65a:	e9 2f       	mov	r30, r25
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	e9 53       	subi	r30, 0x39	; 57
     660:	ff 4d       	sbci	r31, 0xDF	; 223
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	80 83       	st	Z, r24
		i++;
     666:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     668:	97 30       	cpi	r25, 0x07	; 7
     66a:	b9 f7       	brne	.-18     	; 0x65a <udi_hid_kbd_up+0x3e>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     66c:	10 92 ce 20 	sts	0x20CE, r1
	udi_hid_kbd_b_report_valid = true;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 cf 20 	sts	0x20CF, r24

	// Send report
	udi_hid_kbd_send_report();
     676:	89 df       	rcall	.-238    	; 0x58a <udi_hid_kbd_send_report>
     678:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return true;
}
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
     680:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     682:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     684:	f8 94       	cli

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
     686:	90 91 c9 20 	lds	r25, 0x20C9
     68a:	99 23       	and	r25, r25
     68c:	b1 f0       	breq	.+44     	; 0x6ba <udi_hid_kbd_down+0x3a>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     68e:	98 17       	cp	r25, r24
     690:	41 f0       	breq	.+16     	; 0x6a2 <udi_hid_kbd_down+0x22>
     692:	ea ec       	ldi	r30, 0xCA	; 202
     694:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     696:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
     698:	21 91       	ld	r18, Z+
     69a:	22 23       	and	r18, r18
     69c:	49 f0       	breq	.+18     	; 0x6b0 <udi_hid_kbd_down+0x30>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     69e:	28 13       	cpse	r18, r24
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <udi_hid_kbd_down+0x28>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6a2:	cf bf       	out	0x3f, r28	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	15 c0       	rjmp	.+42     	; 0x6d2 <udi_hid_kbd_down+0x52>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     6a8:	9f 5f       	subi	r25, 0xFF	; 255
     6aa:	98 30       	cpi	r25, 0x08	; 8
     6ac:	a9 f7       	brne	.-22     	; 0x698 <udi_hid_kbd_down+0x18>
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <udi_hid_kbd_down+0x34>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
     6b0:	98 30       	cpi	r25, 0x08	; 8
     6b2:	21 f4       	brne	.+8      	; 0x6bc <udi_hid_kbd_down+0x3c>
     6b4:	cf bf       	out	0x3f, r28	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <udi_hid_kbd_down+0x52>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     6ba:	92 e0       	ldi	r25, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
     6bc:	e9 2f       	mov	r30, r25
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e9 53       	subi	r30, 0x39	; 57
     6c2:	ff 4d       	sbci	r31, 0xDF	; 223
     6c4:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 cf 20 	sts	0x20CF, r24

	// Send report
	udi_hid_kbd_send_report();
     6cc:	5e df       	rcall	.-324    	; 0x58a <udi_hid_kbd_send_report>
     6ce:	cf bf       	out	0x3f, r28	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
}
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     6dc:	40 91 78 21 	lds	r20, 0x2178
     6e0:	44 23       	and	r20, r20
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <udi_hid_setup+0x10>
     6e4:	65 c0       	rjmp	.+202    	; 0x7b0 <udi_hid_setup+0xda>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     6e6:	40 76       	andi	r20, 0x60	; 96
     6e8:	09 f0       	breq	.+2      	; 0x6ec <udi_hid_setup+0x16>
     6ea:	40 c0       	rjmp	.+128    	; 0x76c <udi_hid_setup+0x96>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     6ec:	20 91 79 21 	lds	r18, 0x2179
     6f0:	26 30       	cpi	r18, 0x06	; 6
     6f2:	e1 f5       	brne	.+120    	; 0x76c <udi_hid_setup+0x96>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     6f4:	83 d1       	rcall	.+774    	; 0x9fc <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     6f6:	fc 01       	movw	r30, r24
     6f8:	22 85       	ldd	r18, Z+10	; 0x0a
     6fa:	21 32       	cpi	r18, 0x21	; 33
     6fc:	99 f5       	brne	.+102    	; 0x764 <udi_hid_setup+0x8e>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     6fe:	20 91 7b 21 	lds	r18, 0x217B
     702:	21 32       	cpi	r18, 0x21	; 33
     704:	b9 f4       	brne	.+46     	; 0x734 <udi_hid_setup+0x5e>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     706:	9c 01       	movw	r18, r24
     708:	27 5f       	subi	r18, 0xF7	; 247
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     70c:	20 93 80 21 	sts	0x2180, r18
     710:	30 93 81 21 	sts	0x2181, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     714:	40 91 7e 21 	lds	r20, 0x217E
     718:	50 91 7f 21 	lds	r21, 0x217F
     71c:	21 85       	ldd	r18, Z+9	; 0x09
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	42 17       	cp	r20, r18
     722:	53 07       	cpc	r21, r19
     724:	08 f4       	brcc	.+2      	; 0x728 <udi_hid_setup+0x52>
     726:	9a 01       	movw	r18, r20
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
     728:	20 93 82 21 	sts	0x2182, r18
     72c:	30 93 83 21 	sts	0x2183, r19
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	69 c0       	rjmp	.+210    	; 0x806 <udi_hid_setup+0x130>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     734:	fc 01       	movw	r30, r24
     736:	37 85       	ldd	r19, Z+15	; 0x0f
     738:	23 13       	cpse	r18, r19
     73a:	16 c0       	rjmp	.+44     	; 0x768 <udi_hid_setup+0x92>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     73c:	c0 93 80 21 	sts	0x2180, r28
     740:	d0 93 81 21 	sts	0x2181, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     744:	20 89       	ldd	r18, Z+16	; 0x10
     746:	31 89       	ldd	r19, Z+17	; 0x11
     748:	80 91 7e 21 	lds	r24, 0x217E
     74c:	90 91 7f 21 	lds	r25, 0x217F
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	08 f4       	brcc	.+2      	; 0x758 <udi_hid_setup+0x82>
     756:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
     758:	80 93 82 21 	sts	0x2182, r24
     75c:	90 93 83 21 	sts	0x2183, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	51 c0       	rjmp	.+162    	; 0x806 <udi_hid_setup+0x130>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	4f c0       	rjmp	.+158    	; 0x806 <udi_hid_setup+0x130>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     768:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
     76a:	4d c0       	rjmp	.+154    	; 0x806 <udi_hid_setup+0x130>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     76c:	40 32       	cpi	r20, 0x20	; 32
     76e:	09 f0       	breq	.+2      	; 0x772 <udi_hid_setup+0x9c>
     770:	41 c0       	rjmp	.+130    	; 0x7f4 <udi_hid_setup+0x11e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     772:	20 91 79 21 	lds	r18, 0x2179
     776:	22 30       	cpi	r18, 0x02	; 2
     778:	19 f0       	breq	.+6      	; 0x780 <udi_hid_setup+0xaa>
     77a:	23 30       	cpi	r18, 0x03	; 3
     77c:	e9 f5       	brne	.+122    	; 0x7f8 <udi_hid_setup+0x122>
     77e:	0c c0       	rjmp	.+24     	; 0x798 <udi_hid_setup+0xc2>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     780:	80 93 80 21 	sts	0x2180, r24
     784:	90 93 81 21 	sts	0x2181, r25
				udd_g_ctrlreq.payload_size = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 93 82 21 	sts	0x2182, r24
     790:	90 93 83 21 	sts	0x2183, r25
				return true;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	37 c0       	rjmp	.+110    	; 0x806 <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     798:	60 93 80 21 	sts	0x2180, r22
     79c:	70 93 81 21 	sts	0x2181, r23
				udd_g_ctrlreq.payload_size = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	80 93 82 21 	sts	0x2182, r24
     7a8:	90 93 83 21 	sts	0x2183, r25
				return true;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	2b c0       	rjmp	.+86     	; 0x806 <udi_hid_setup+0x130>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     7b0:	40 76       	andi	r20, 0x60	; 96
     7b2:	40 32       	cpi	r20, 0x20	; 32
     7b4:	19 f5       	brne	.+70     	; 0x7fc <udi_hid_setup+0x126>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     7b6:	40 91 79 21 	lds	r20, 0x2179
     7ba:	49 30       	cpi	r20, 0x09	; 9
     7bc:	31 f0       	breq	.+12     	; 0x7ca <udi_hid_setup+0xf4>
     7be:	00 f1       	brcs	.+64     	; 0x800 <udi_hid_setup+0x12a>
     7c0:	4a 30       	cpi	r20, 0x0A	; 10
     7c2:	31 f0       	breq	.+12     	; 0x7d0 <udi_hid_setup+0xfa>
     7c4:	4b 30       	cpi	r20, 0x0B	; 11
     7c6:	e1 f4       	brne	.+56     	; 0x800 <udi_hid_setup+0x12a>
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <udi_hid_setup+0x106>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
     7ca:	f9 01       	movw	r30, r18
     7cc:	19 95       	eicall
     7ce:	1b c0       	rjmp	.+54     	; 0x806 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     7d0:	20 91 7b 21 	lds	r18, 0x217B
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
				return true;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	15 c0       	rjmp	.+42     	; 0x806 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     7dc:	80 91 7e 21 	lds	r24, 0x217E
     7e0:	90 91 7f 21 	lds	r25, 0x217F
     7e4:	89 2b       	or	r24, r25
     7e6:	71 f4       	brne	.+28     	; 0x804 <udi_hid_setup+0x12e>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     7e8:	80 91 7a 21 	lds	r24, 0x217A
     7ec:	fb 01       	movw	r30, r22
     7ee:	80 83       	st	Z, r24
				return true;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	09 c0       	rjmp	.+18     	; 0x806 <udi_hid_setup+0x130>
			}
		}
	}
	return false;	// Request not supported
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	07 c0       	rjmp	.+14     	; 0x806 <udi_hid_setup+0x130>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <udi_hid_setup+0x130>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	03 c0       	rjmp	.+6      	; 0x806 <udi_hid_setup+0x130>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	01 c0       	rjmp	.+2      	; 0x806 <udi_hid_setup+0x130>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     804:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <udc_get_eof_conf>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     80c:	e0 91 dd 20 	lds	r30, 0x20DD
     810:	f0 91 de 20 	lds	r31, 0x20DE
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	22 81       	ldd	r18, Z+2	; 0x02
     81c:	33 81       	ldd	r19, Z+3	; 0x03
     81e:	2e 0f       	add	r18, r30
     820:	3f 1f       	adc	r19, r31
     822:	82 2f       	mov	r24, r18
     824:	93 2f       	mov	r25, r19
     826:	08 95       	ret

00000828 <udc_next_desc_in_iface>:
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	16 2f       	mov	r17, r22
     832:	ec df       	rcall	.-40     	; 0x80c <udc_get_eof_conf>
     834:	28 81       	ld	r18, Y
     836:	fe 01       	movw	r30, r28
     838:	e2 0f       	add	r30, r18
     83a:	f1 1d       	adc	r31, r1
     83c:	e8 17       	cp	r30, r24
     83e:	f9 07       	cpc	r31, r25
     840:	a0 f4       	brcc	.+40     	; 0x86a <udc_next_desc_in_iface+0x42>
     842:	21 81       	ldd	r18, Z+1	; 0x01
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	a1 f0       	breq	.+40     	; 0x870 <udc_next_desc_in_iface+0x48>
     848:	21 13       	cpse	r18, r17
     84a:	06 c0       	rjmp	.+12     	; 0x858 <udc_next_desc_in_iface+0x30>
     84c:	16 c0       	rjmp	.+44     	; 0x87a <udc_next_desc_in_iface+0x52>
     84e:	21 81       	ldd	r18, Z+1	; 0x01
     850:	24 30       	cpi	r18, 0x04	; 4
     852:	89 f0       	breq	.+34     	; 0x876 <udc_next_desc_in_iface+0x4e>
     854:	21 17       	cp	r18, r17
     856:	89 f0       	breq	.+34     	; 0x87a <udc_next_desc_in_iface+0x52>
     858:	20 81       	ld	r18, Z
     85a:	e2 0f       	add	r30, r18
     85c:	f1 1d       	adc	r31, r1
     85e:	e8 17       	cp	r30, r24
     860:	f9 07       	cpc	r31, r25
     862:	a8 f3       	brcs	.-22     	; 0x84e <udc_next_desc_in_iface+0x26>
     864:	e0 e0       	ldi	r30, 0x00	; 0
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	08 c0       	rjmp	.+16     	; 0x87a <udc_next_desc_in_iface+0x52>
     86a:	e0 e0       	ldi	r30, 0x00	; 0
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <udc_next_desc_in_iface+0x52>
     870:	e0 e0       	ldi	r30, 0x00	; 0
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	02 c0       	rjmp	.+4      	; 0x87a <udc_next_desc_in_iface+0x52>
     876:	e0 e0       	ldi	r30, 0x00	; 0
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	8e 2f       	mov	r24, r30
     87c:	9f 2f       	mov	r25, r31
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	08 95       	ret

00000886 <udc_update_iface_desc>:
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	18 2f       	mov	r17, r24
     890:	06 2f       	mov	r16, r22
     892:	80 91 dc 20 	lds	r24, 0x20DC
     896:	88 23       	and	r24, r24
     898:	69 f1       	breq	.+90     	; 0x8f4 <udc_update_iface_desc+0x6e>
     89a:	e0 91 dd 20 	lds	r30, 0x20DD
     89e:	f0 91 de 20 	lds	r31, 0x20DE
     8a2:	c0 81       	ld	r28, Z
     8a4:	d1 81       	ldd	r29, Z+1	; 0x01
     8a6:	8c 81       	ldd	r24, Y+4	; 0x04
     8a8:	18 17       	cp	r17, r24
     8aa:	30 f5       	brcc	.+76     	; 0x8f8 <udc_update_iface_desc+0x72>
     8ac:	c0 93 da 20 	sts	0x20DA, r28
     8b0:	d0 93 db 20 	sts	0x20DB, r29
     8b4:	ab df       	rcall	.-170    	; 0x80c <udc_get_eof_conf>
     8b6:	9c 01       	movw	r18, r24
     8b8:	c8 17       	cp	r28, r24
     8ba:	d9 07       	cpc	r29, r25
     8bc:	f8 f4       	brcc	.+62     	; 0x8fc <udc_update_iface_desc+0x76>
     8be:	99 81       	ldd	r25, Y+1	; 0x01
     8c0:	94 30       	cpi	r25, 0x04	; 4
     8c2:	61 f4       	brne	.+24     	; 0x8dc <udc_update_iface_desc+0x56>
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	91 13       	cpse	r25, r17
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <udc_update_iface_desc+0x56>
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	80 13       	cpse	r24, r16
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <udc_update_iface_desc+0x56>
     8d0:	c0 93 da 20 	sts	0x20DA, r28
     8d4:	d0 93 db 20 	sts	0x20DB, r29
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <udc_update_iface_desc+0x78>
     8dc:	98 81       	ld	r25, Y
     8de:	c9 0f       	add	r28, r25
     8e0:	d1 1d       	adc	r29, r1
     8e2:	c2 17       	cp	r28, r18
     8e4:	d3 07       	cpc	r29, r19
     8e6:	58 f3       	brcs	.-42     	; 0x8be <udc_update_iface_desc+0x38>
     8e8:	c0 93 da 20 	sts	0x20DA, r28
     8ec:	d0 93 db 20 	sts	0x20DB, r29
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <udc_update_iface_desc+0x78>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <udc_update_iface_desc+0x78>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <udc_update_iface_desc+0x78>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <udc_valid_address>:
     908:	80 91 7a 21 	lds	r24, 0x217A
     90c:	8f 77       	andi	r24, 0x7F	; 127
     90e:	59 c7       	rjmp	.+3762   	; 0x17c2 <udd_set_address>

00000910 <udc_iface_enable>:
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	18 2f       	mov	r17, r24
     918:	b6 df       	rcall	.-148    	; 0x886 <udc_update_iface_desc>
     91a:	88 23       	and	r24, r24
     91c:	41 f1       	breq	.+80     	; 0x96e <udc_iface_enable+0x5e>
     91e:	c0 91 da 20 	lds	r28, 0x20DA
     922:	d0 91 db 20 	lds	r29, 0x20DB
     926:	65 e0       	ldi	r22, 0x05	; 5
     928:	ce 01       	movw	r24, r28
     92a:	7e df       	rcall	.-260    	; 0x828 <udc_next_desc_in_iface>
     92c:	ec 01       	movw	r28, r24
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	41 f0       	breq	.+16     	; 0x942 <udc_iface_enable+0x32>
     932:	4c 81       	ldd	r20, Y+4	; 0x04
     934:	5d 81       	ldd	r21, Y+5	; 0x05
     936:	6b 81       	ldd	r22, Y+3	; 0x03
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	59 d7       	rcall	.+3762   	; 0x17ee <udd_ep_alloc>
     93c:	81 11       	cpse	r24, r1
     93e:	f3 cf       	rjmp	.-26     	; 0x926 <udc_iface_enable+0x16>
     940:	17 c0       	rjmp	.+46     	; 0x970 <udc_iface_enable+0x60>
     942:	a0 91 dd 20 	lds	r26, 0x20DD
     946:	b0 91 de 20 	lds	r27, 0x20DE
     94a:	81 2f       	mov	r24, r17
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	13 97       	sbiw	r26, 0x03	; 3
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	01 90       	ld	r0, Z+
     960:	f0 81       	ld	r31, Z
     962:	e0 2d       	mov	r30, r0
     964:	01 90       	ld	r0, Z+
     966:	f0 81       	ld	r31, Z
     968:	e0 2d       	mov	r30, r0
     96a:	19 95       	eicall
     96c:	01 c0       	rjmp	.+2      	; 0x970 <udc_iface_enable+0x60>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	08 95       	ret

00000978 <udc_iface_disable>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	c8 2f       	mov	r28, r24
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	80 df       	rcall	.-256    	; 0x886 <udc_update_iface_desc>
     986:	88 23       	and	r24, r24
     988:	89 f1       	breq	.+98     	; 0x9ec <udc_iface_disable+0x74>
     98a:	a0 91 dd 20 	lds	r26, 0x20DD
     98e:	b0 91 de 20 	lds	r27, 0x20DE
     992:	ec 2f       	mov	r30, r28
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	12 96       	adiw	r26, 0x02	; 2
     99c:	2d 91       	ld	r18, X+
     99e:	3c 91       	ld	r19, X
     9a0:	13 97       	sbiw	r26, 0x03	; 3
     9a2:	e2 0f       	add	r30, r18
     9a4:	f3 1f       	adc	r31, r19
     9a6:	00 81       	ld	r16, Z
     9a8:	11 81       	ldd	r17, Z+1	; 0x01
     9aa:	d8 01       	movw	r26, r16
     9ac:	16 96       	adiw	r26, 0x06	; 6
     9ae:	ed 91       	ld	r30, X+
     9b0:	fc 91       	ld	r31, X
     9b2:	17 97       	sbiw	r26, 0x07	; 7
     9b4:	19 95       	eicall
     9b6:	68 2f       	mov	r22, r24
     9b8:	8c 2f       	mov	r24, r28
     9ba:	65 df       	rcall	.-310    	; 0x886 <udc_update_iface_desc>
     9bc:	88 23       	and	r24, r24
     9be:	c1 f0       	breq	.+48     	; 0x9f0 <udc_iface_disable+0x78>
     9c0:	c0 91 da 20 	lds	r28, 0x20DA
     9c4:	d0 91 db 20 	lds	r29, 0x20DB
     9c8:	65 e0       	ldi	r22, 0x05	; 5
     9ca:	ce 01       	movw	r24, r28
     9cc:	2d df       	rcall	.-422    	; 0x828 <udc_next_desc_in_iface>
     9ce:	ec 01       	movw	r28, r24
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	21 f0       	breq	.+8      	; 0x9dc <udc_iface_disable+0x64>
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	0e 94 ed 0c 	call	0x19da	; 0x19da <udd_ep_free>
     9da:	f6 cf       	rjmp	.-20     	; 0x9c8 <udc_iface_disable+0x50>
     9dc:	d8 01       	movw	r26, r16
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	ed 91       	ld	r30, X+
     9e2:	fc 91       	ld	r31, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	19 95       	eicall
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <udc_iface_disable+0x7a>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <udc_iface_disable+0x7a>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <udc_get_interface_desc>:
     9fc:	80 91 da 20 	lds	r24, 0x20DA
     a00:	90 91 db 20 	lds	r25, 0x20DB
     a04:	08 95       	ret

00000a06 <udc_start>:
     a06:	79 c6       	rjmp	.+3314   	; 0x16fa <udd_enable>
     a08:	08 95       	ret

00000a0a <udc_reset>:
     a0a:	cf 93       	push	r28
     a0c:	80 91 dc 20 	lds	r24, 0x20DC
     a10:	88 23       	and	r24, r24
     a12:	c1 f0       	breq	.+48     	; 0xa44 <udc_reset+0x3a>
     a14:	e0 91 dd 20 	lds	r30, 0x20DD
     a18:	f0 91 de 20 	lds	r31, 0x20DE
     a1c:	01 90       	ld	r0, Z+
     a1e:	f0 81       	ld	r31, Z
     a20:	e0 2d       	mov	r30, r0
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	88 23       	and	r24, r24
     a26:	71 f0       	breq	.+28     	; 0xa44 <udc_reset+0x3a>
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	8c 2f       	mov	r24, r28
     a2c:	a5 df       	rcall	.-182    	; 0x978 <udc_iface_disable>
     a2e:	cf 5f       	subi	r28, 0xFF	; 255
     a30:	e0 91 dd 20 	lds	r30, 0x20DD
     a34:	f0 91 de 20 	lds	r31, 0x20DE
     a38:	01 90       	ld	r0, Z+
     a3a:	f0 81       	ld	r31, Z
     a3c:	e0 2d       	mov	r30, r0
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	c8 17       	cp	r28, r24
     a42:	98 f3       	brcs	.-26     	; 0xa2a <udc_reset+0x20>
     a44:	10 92 dc 20 	sts	0x20DC, r1
     a48:	80 91 df 20 	lds	r24, 0x20DF
     a4c:	81 fd       	sbrc	r24, 1
     a4e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <main_remotewakeup_disable>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	80 93 df 20 	sts	0x20DF, r24
     a5a:	90 93 e0 20 	sts	0x20E0, r25
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     a62:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     a64:	80 91 dc 20 	lds	r24, 0x20DC
     a68:	88 23       	and	r24, r24
     a6a:	41 f1       	breq	.+80     	; 0xabc <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a6c:	e0 91 dd 20 	lds	r30, 0x20DD
     a70:	f0 91 de 20 	lds	r31, 0x20DE
     a74:	a0 81       	ld	r26, Z
     a76:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a78:	14 96       	adiw	r26, 0x04	; 4
     a7a:	8c 91       	ld	r24, X
     a7c:	88 23       	and	r24, r24
     a7e:	f1 f0       	breq	.+60     	; 0xabc <udc_sof_notify+0x5a>
     a80:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     a82:	8c 2f       	mov	r24, r28
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	02 80       	ldd	r0, Z+2	; 0x02
     a8c:	f3 81       	ldd	r31, Z+3	; 0x03
     a8e:	e0 2d       	mov	r30, r0
     a90:	e8 0f       	add	r30, r24
     a92:	f9 1f       	adc	r31, r25
     a94:	01 90       	ld	r0, Z+
     a96:	f0 81       	ld	r31, Z
     a98:	e0 2d       	mov	r30, r0
     a9a:	00 84       	ldd	r0, Z+8	; 0x08
     a9c:	f1 85       	ldd	r31, Z+9	; 0x09
     a9e:	e0 2d       	mov	r30, r0
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     aa4:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     aa6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     aa8:	e0 91 dd 20 	lds	r30, 0x20DD
     aac:	f0 91 de 20 	lds	r31, 0x20DE
     ab0:	a0 81       	ld	r26, Z
     ab2:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ab4:	14 96       	adiw	r26, 0x04	; 4
     ab6:	8c 91       	ld	r24, X
     ab8:	c8 17       	cp	r28, r24
     aba:	18 f3       	brcs	.-58     	; 0xa82 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     aca:	10 92 82 21 	sts	0x2182, r1
     ace:	10 92 83 21 	sts	0x2183, r1
	udd_g_ctrlreq.callback = NULL;
     ad2:	10 92 84 21 	sts	0x2184, r1
     ad6:	10 92 85 21 	sts	0x2185, r1
	udd_g_ctrlreq.over_under_run = NULL;
     ada:	10 92 86 21 	sts	0x2186, r1
     ade:	10 92 87 21 	sts	0x2187, r1

	if (Udd_setup_is_in()) {
     ae2:	20 91 78 21 	lds	r18, 0x2178
     ae6:	22 23       	and	r18, r18
     ae8:	0c f0       	brlt	.+2      	; 0xaec <udc_process_setup+0x2c>
     aea:	8f c2       	rjmp	.+1310   	; 0x100a <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
     aec:	80 91 7e 21 	lds	r24, 0x217E
     af0:	90 91 7f 21 	lds	r25, 0x217F
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	09 f0       	breq	.+2      	; 0xafa <udc_process_setup+0x3a>
     af8:	8d c2       	rjmp	.+1306   	; 0x1014 <udc_process_setup+0x554>
     afa:	7f c2       	rjmp	.+1278   	; 0xffa <udc_process_setup+0x53a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     afc:	2f 71       	andi	r18, 0x1F	; 31
     afe:	09 f0       	breq	.+2      	; 0xb02 <udc_process_setup+0x42>
     b00:	9d c0       	rjmp	.+314    	; 0xc3c <udc_process_setup+0x17c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b02:	30 91 79 21 	lds	r19, 0x2179
     b06:	36 30       	cpi	r19, 0x06	; 6
     b08:	81 f0       	breq	.+32     	; 0xb2a <udc_process_setup+0x6a>
     b0a:	38 30       	cpi	r19, 0x08	; 8
     b0c:	09 f4       	brne	.+2      	; 0xb10 <udc_process_setup+0x50>
     b0e:	8b c0       	rjmp	.+278    	; 0xc26 <udc_process_setup+0x166>
     b10:	31 11       	cpse	r19, r1
     b12:	94 c0       	rjmp	.+296    	; 0xc3c <udc_process_setup+0x17c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b14:	02 97       	sbiw	r24, 0x02	; 2
     b16:	39 f4       	brne	.+14     	; 0xb26 <udc_process_setup+0x66>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8f ed       	ldi	r24, 0xDF	; 223
     b1e:	90 e2       	ldi	r25, 0x20	; 32
     b20:	5d d6       	rcall	.+3258   	; 0x17dc <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	f3 c1       	rjmp	.+998    	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	f1 c1       	rjmp	.+994    	; 0xf0c <udc_process_setup+0x44c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b2a:	20 91 7a 21 	lds	r18, 0x217A
     b2e:	30 91 7b 21 	lds	r19, 0x217B
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     b32:	83 2f       	mov	r24, r19
     b34:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	91 05       	cpc	r25, r1
     b3a:	79 f0       	breq	.+30     	; 0xb5a <udc_process_setup+0x9a>
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	91 05       	cpc	r25, r1
     b40:	69 f1       	breq	.+90     	; 0xb9c <udc_process_setup+0xdc>
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	09 f0       	breq	.+2      	; 0xb48 <udc_process_setup+0x88>
     b46:	67 c0       	rjmp	.+206    	; 0xc16 <udc_process_setup+0x156>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     b48:	80 91 4b 20 	lds	r24, 0x204B
     b4c:	90 91 4c 20 	lds	r25, 0x204C
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     b50:	dc 01       	movw	r26, r24
     b52:	6c 91       	ld	r22, X
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	42 d6       	rcall	.+3204   	; 0x17dc <udd_set_setup_payload>
     b58:	4d c0       	rjmp	.+154    	; 0xbf4 <udc_process_setup+0x134>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     b5a:	e0 91 4b 20 	lds	r30, 0x204B
     b5e:	f0 91 4c 20 	lds	r31, 0x204C
     b62:	81 89       	ldd	r24, Z+17	; 0x11
     b64:	28 17       	cp	r18, r24
     b66:	08 f0       	brcs	.+2      	; 0xb6a <udc_process_setup+0xaa>
     b68:	58 c0       	rjmp	.+176    	; 0xc1a <udc_process_setup+0x15a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     b6a:	c9 01       	movw	r24, r18
     b6c:	99 27       	eor	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	e0 91 4d 20 	lds	r30, 0x204D
     b7a:	f0 91 4e 20 	lds	r31, 0x204E
     b7e:	e8 0f       	add	r30, r24
     b80:	f9 1f       	adc	r31, r25
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     b86:	fc 01       	movw	r30, r24
     b88:	62 81       	ldd	r22, Z+2	; 0x02
     b8a:	73 81       	ldd	r23, Z+3	; 0x03
     b8c:	27 d6       	rcall	.+3150   	; 0x17dc <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     b8e:	e0 91 80 21 	lds	r30, 0x2180
     b92:	f0 91 81 21 	lds	r31, 0x2181
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	81 83       	std	Z+1, r24	; 0x01
     b9a:	2c c0       	rjmp	.+88     	; 0xbf4 <udc_process_setup+0x134>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     b9c:	33 27       	eor	r19, r19
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	31 05       	cpc	r19, r1
     ba2:	59 f0       	breq	.+22     	; 0xbba <udc_process_setup+0xfa>
     ba4:	20 f0       	brcs	.+8      	; 0xbae <udc_process_setup+0xee>
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	c9 f5       	brne	.+114    	; 0xc1e <udc_process_setup+0x15e>
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <udc_process_setup+0x102>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     bae:	64 e0       	ldi	r22, 0x04	; 4
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	8a e8       	ldi	r24, 0x8A	; 138
     bb4:	90 e2       	ldi	r25, 0x20	; 32
     bb6:	12 d6       	rcall	.+3108   	; 0x17dc <udd_set_setup_payload>
     bb8:	1d c0       	rjmp	.+58     	; 0xbf4 <udc_process_setup+0x134>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     bba:	8e e8       	ldi	r24, 0x8E	; 142
     bbc:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     bbe:	29 e0       	ldi	r18, 0x09	; 9
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <udc_process_setup+0x108>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     bc2:	88 e9       	ldi	r24, 0x98	; 152
     bc4:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     bc6:	2c e0       	ldi	r18, 0x0C	; 12
     bc8:	38 2f       	mov	r19, r24
     bca:	e8 ea       	ldi	r30, 0xA8	; 168
     bcc:	f0 e2       	ldi	r31, 0x20	; 32
     bce:	a8 2f       	mov	r26, r24
     bd0:	b9 2f       	mov	r27, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     bd2:	8d 91       	ld	r24, X+
     bd4:	80 83       	st	Z, r24
     bd6:	11 82       	std	Z+1, r1	; 0x01
     bd8:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     bda:	8a 2f       	mov	r24, r26
     bdc:	83 1b       	sub	r24, r19
     bde:	82 17       	cp	r24, r18
     be0:	c0 f3       	brcs	.-16     	; 0xbd2 <udc_process_setup+0x112>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     be2:	22 0f       	add	r18, r18
     be4:	62 2f       	mov	r22, r18
     be6:	6e 5f       	subi	r22, 0xFE	; 254
     be8:	60 93 a6 20 	sts	0x20A6, r22
		udd_set_setup_payload(
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	86 ea       	ldi	r24, 0xA6	; 166
     bf0:	90 e2       	ldi	r25, 0x20	; 32
     bf2:	f4 d5       	rcall	.+3048   	; 0x17dc <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     bf4:	80 91 7e 21 	lds	r24, 0x217E
     bf8:	90 91 7f 21 	lds	r25, 0x217F
     bfc:	20 91 82 21 	lds	r18, 0x2182
     c00:	30 91 83 21 	lds	r19, 0x2183
     c04:	82 17       	cp	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	60 f4       	brcc	.+24     	; 0xc22 <udc_process_setup+0x162>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     c0a:	80 93 82 21 	sts	0x2182, r24
     c0e:	90 93 83 21 	sts	0x2183, r25
	}
	return true;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	7b c1       	rjmp	.+758    	; 0xf0c <udc_process_setup+0x44c>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	79 c1       	rjmp	.+754    	; 0xf0c <udc_process_setup+0x44c>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	77 c1       	rjmp	.+750    	; 0xf0c <udc_process_setup+0x44c>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	75 c1       	rjmp	.+746    	; 0xf0c <udc_process_setup+0x44c>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	73 c1       	rjmp	.+742    	; 0xf0c <udc_process_setup+0x44c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	39 f4       	brne	.+14     	; 0xc38 <udc_process_setup+0x178>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	8c ed       	ldi	r24, 0xDC	; 220
     c30:	90 e2       	ldi	r25, 0x20	; 32
     c32:	d4 d5       	rcall	.+2984   	; 0x17dc <udd_set_setup_payload>
	return true;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	6a c1       	rjmp	.+724    	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	68 c1       	rjmp	.+720    	; 0xf0c <udc_process_setup+0x44c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c3c:	21 30       	cpi	r18, 0x01	; 1
     c3e:	09 f0       	breq	.+2      	; 0xc42 <udc_process_setup+0x182>
     c40:	40 c0       	rjmp	.+128    	; 0xcc2 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c42:	30 91 79 21 	lds	r19, 0x2179
     c46:	3a 30       	cpi	r19, 0x0A	; 10
     c48:	e1 f5       	brne	.+120    	; 0xcc2 <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	91 f5       	brne	.+100    	; 0xcb2 <udc_process_setup+0x1f2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c4e:	80 91 dc 20 	lds	r24, 0x20DC
     c52:	88 23       	and	r24, r24
     c54:	81 f1       	breq	.+96     	; 0xcb6 <udc_process_setup+0x1f6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c56:	c0 91 7c 21 	lds	r28, 0x217C
     c5a:	d0 91 7d 21 	lds	r29, 0x217D
     c5e:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c60:	00 91 dd 20 	lds	r16, 0x20DD
     c64:	10 91 de 20 	lds	r17, 0x20DE
     c68:	d8 01       	movw	r26, r16
     c6a:	ed 91       	ld	r30, X+
     c6c:	fc 91       	ld	r31, X
     c6e:	94 81       	ldd	r25, Z+4	; 0x04
     c70:	c9 17       	cp	r28, r25
     c72:	18 f5       	brcc	.+70     	; 0xcba <udc_process_setup+0x1fa>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	07 de       	rcall	.-1010   	; 0x886 <udc_update_iface_desc>
     c78:	88 23       	and	r24, r24
     c7a:	09 f1       	breq	.+66     	; 0xcbe <udc_process_setup+0x1fe>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c7c:	ce 01       	movw	r24, r28
     c7e:	99 27       	eor	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	d8 01       	movw	r26, r16
     c86:	12 96       	adiw	r26, 0x02	; 2
     c88:	ed 91       	ld	r30, X+
     c8a:	fc 91       	ld	r31, X
     c8c:	13 97       	sbiw	r26, 0x03	; 3
     c8e:	e8 0f       	add	r30, r24
     c90:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     c92:	01 90       	ld	r0, Z+
     c94:	f0 81       	ld	r31, Z
     c96:	e0 2d       	mov	r30, r0
     c98:	86 81       	ldd	r24, Z+6	; 0x06
     c9a:	97 81       	ldd	r25, Z+7	; 0x07
     c9c:	fc 01       	movw	r30, r24
     c9e:	19 95       	eicall
     ca0:	80 93 e1 20 	sts	0x20E1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	81 ee       	ldi	r24, 0xE1	; 225
     caa:	90 e2       	ldi	r25, 0x20	; 32
     cac:	97 d5       	rcall	.+2862   	; 0x17dc <udd_set_setup_payload>
	return true;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	2d c1       	rjmp	.+602    	; 0xf0c <udc_process_setup+0x44c>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	2b c1       	rjmp	.+598    	; 0xf0c <udc_process_setup+0x44c>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	29 c1       	rjmp	.+594    	; 0xf0c <udc_process_setup+0x44c>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	27 c1       	rjmp	.+590    	; 0xf0c <udc_process_setup+0x44c>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	25 c1       	rjmp	.+586    	; 0xf0c <udc_process_setup+0x44c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     cc2:	22 30       	cpi	r18, 0x02	; 2
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <udc_process_setup+0x208>
     cc6:	24 c1       	rjmp	.+584    	; 0xf10 <udc_process_setup+0x450>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cc8:	20 91 79 21 	lds	r18, 0x2179
     ccc:	21 11       	cpse	r18, r1
     cce:	1b c1       	rjmp	.+566    	; 0xf06 <udc_process_setup+0x446>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     cd0:	02 97       	sbiw	r24, 0x02	; 2
     cd2:	71 f4       	brne	.+28     	; 0xcf0 <udc_process_setup+0x230>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     cd4:	80 91 7c 21 	lds	r24, 0x217C
     cd8:	b3 d5       	rcall	.+2918   	; 0x1840 <udd_ep_is_halted>
     cda:	80 93 e2 20 	sts	0x20E2, r24
     cde:	10 92 e3 20 	sts	0x20E3, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	82 ee       	ldi	r24, 0xE2	; 226
     ce8:	90 e2       	ldi	r25, 0x20	; 32
     cea:	78 d5       	rcall	.+2800   	; 0x17dc <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e c1       	rjmp	.+540    	; 0xf0c <udc_process_setup+0x44c>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0c c1       	rjmp	.+536    	; 0xf0c <udc_process_setup+0x44c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     cf4:	2f 71       	andi	r18, 0x1F	; 31
     cf6:	09 f0       	breq	.+2      	; 0xcfa <udc_process_setup+0x23a>
     cf8:	b0 c0       	rjmp	.+352    	; 0xe5a <udc_process_setup+0x39a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     cfa:	80 91 79 21 	lds	r24, 0x2179
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	c1 f1       	breq	.+112    	; 0xd72 <udc_process_setup+0x2b2>
     d02:	20 f4       	brcc	.+8      	; 0xd0c <udc_process_setup+0x24c>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	09 f0       	breq	.+2      	; 0xd0a <udc_process_setup+0x24a>
     d08:	a8 c0       	rjmp	.+336    	; 0xe5a <udc_process_setup+0x39a>
     d0a:	16 c0       	rjmp	.+44     	; 0xd38 <udc_process_setup+0x278>
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	21 f0       	breq	.+8      	; 0xd18 <udc_process_setup+0x258>
     d10:	89 30       	cpi	r24, 0x09	; 9
     d12:	09 f0       	breq	.+2      	; 0xd16 <udc_process_setup+0x256>
     d14:	a2 c0       	rjmp	.+324    	; 0xe5a <udc_process_setup+0x39a>
     d16:	4a c0       	rjmp	.+148    	; 0xdac <udc_process_setup+0x2ec>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d18:	80 91 7e 21 	lds	r24, 0x217E
     d1c:	90 91 7f 21 	lds	r25, 0x217F
     d20:	89 2b       	or	r24, r25
     d22:	41 f4       	brne	.+16     	; 0xd34 <udc_process_setup+0x274>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d24:	84 e8       	ldi	r24, 0x84	; 132
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	80 93 84 21 	sts	0x2184, r24
     d2c:	90 93 85 21 	sts	0x2185, r25
	return true;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	ec c0       	rjmp	.+472    	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	ea c0       	rjmp	.+468    	; 0xf0c <udc_process_setup+0x44c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d38:	80 91 7e 21 	lds	r24, 0x217E
     d3c:	90 91 7f 21 	lds	r25, 0x217F
     d40:	89 2b       	or	r24, r25
     d42:	99 f4       	brne	.+38     	; 0xd6a <udc_process_setup+0x2aa>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     d44:	80 91 7a 21 	lds	r24, 0x217A
     d48:	90 91 7b 21 	lds	r25, 0x217B
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	79 f4       	brne	.+30     	; 0xd6e <udc_process_setup+0x2ae>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     d50:	80 91 df 20 	lds	r24, 0x20DF
     d54:	90 91 e0 20 	lds	r25, 0x20E0
     d58:	8d 7f       	andi	r24, 0xFD	; 253
     d5a:	80 93 df 20 	sts	0x20DF, r24
     d5e:	90 93 e0 20 	sts	0x20E0, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
     d62:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <main_remotewakeup_disable>
#endif
		return true;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	d1 c0       	rjmp	.+418    	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	cf c0       	rjmp	.+414    	; 0xf0c <udc_process_setup+0x44c>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	cd c0       	rjmp	.+410    	; 0xf0c <udc_process_setup+0x44c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d72:	80 91 7e 21 	lds	r24, 0x217E
     d76:	90 91 7f 21 	lds	r25, 0x217F
     d7a:	89 2b       	or	r24, r25
     d7c:	99 f4       	brne	.+38     	; 0xda4 <udc_process_setup+0x2e4>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
     d7e:	80 91 7a 21 	lds	r24, 0x217A
     d82:	90 91 7b 21 	lds	r25, 0x217B
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	79 f4       	brne	.+30     	; 0xda8 <udc_process_setup+0x2e8>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     d8a:	80 91 df 20 	lds	r24, 0x20DF
     d8e:	90 91 e0 20 	lds	r25, 0x20E0
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	80 93 df 20 	sts	0x20DF, r24
     d98:	90 93 e0 20 	sts	0x20E0, r25
		UDC_REMOTEWAKEUP_ENABLE();
     d9c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <main_remotewakeup_enable>
		return true;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	b4 c0       	rjmp	.+360    	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	b2 c0       	rjmp	.+356    	; 0xf0c <udc_process_setup+0x44c>
		break;
#endif
	default:
		break;
	}
	return false;
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	b0 c0       	rjmp	.+352    	; 0xf0c <udc_process_setup+0x44c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     dac:	80 91 7e 21 	lds	r24, 0x217E
     db0:	90 91 7f 21 	lds	r25, 0x217F
     db4:	89 2b       	or	r24, r25
     db6:	09 f0       	breq	.+2      	; 0xdba <udc_process_setup+0x2fa>
     db8:	44 c0       	rjmp	.+136    	; 0xe42 <udc_process_setup+0x382>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     dba:	06 d5       	rcall	.+2572   	; 0x17c8 <udd_getaddress>
     dbc:	88 23       	and	r24, r24
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <udc_process_setup+0x302>
     dc0:	42 c0       	rjmp	.+132    	; 0xe46 <udc_process_setup+0x386>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     dc2:	20 91 7a 21 	lds	r18, 0x217A
     dc6:	30 91 7b 21 	lds	r19, 0x217B
     dca:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     dcc:	e0 91 4b 20 	lds	r30, 0x204B
     dd0:	f0 91 4c 20 	lds	r31, 0x204C
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     dd4:	81 89       	ldd	r24, Z+17	; 0x11
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	82 17       	cp	r24, r18
     dda:	93 07       	cpc	r25, r19
     ddc:	b0 f1       	brcs	.+108    	; 0xe4a <udc_process_setup+0x38a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     dde:	15 de       	rcall	.-982    	; 0xa0a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     de0:	80 91 7a 21 	lds	r24, 0x217A
     de4:	90 91 7b 21 	lds	r25, 0x217B
     de8:	80 93 dc 20 	sts	0x20DC, r24
	if (udc_num_configuration == 0) {
     dec:	88 23       	and	r24, r24
     dee:	79 f1       	breq	.+94     	; 0xe4e <udc_process_setup+0x38e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     df0:	99 27       	eor	r25, r25
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	e0 91 4d 20 	lds	r30, 0x204D
     e00:	f0 91 4e 20 	lds	r31, 0x204E
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	e0 93 dd 20 	sts	0x20DD, r30
     e0c:	f0 93 de 20 	sts	0x20DE, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e10:	01 90       	ld	r0, Z+
     e12:	f0 81       	ld	r31, Z
     e14:	e0 2d       	mov	r30, r0
     e16:	84 81       	ldd	r24, Z+4	; 0x04
     e18:	88 23       	and	r24, r24
     e1a:	d9 f0       	breq	.+54     	; 0xe52 <udc_process_setup+0x392>
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	8c 2f       	mov	r24, r28
     e22:	76 dd       	rcall	.-1300   	; 0x910 <udc_iface_enable>
     e24:	88 23       	and	r24, r24
     e26:	b9 f0       	breq	.+46     	; 0xe56 <udc_process_setup+0x396>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e28:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e2a:	e0 91 dd 20 	lds	r30, 0x20DD
     e2e:	f0 91 de 20 	lds	r31, 0x20DE
     e32:	01 90       	ld	r0, Z+
     e34:	f0 81       	ld	r31, Z
     e36:	e0 2d       	mov	r30, r0
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	c8 17       	cp	r28, r24
     e3c:	80 f3       	brcs	.-32     	; 0xe1e <udc_process_setup+0x35e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	65 c0       	rjmp	.+202    	; 0xf0c <udc_process_setup+0x44c>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	63 c0       	rjmp	.+198    	; 0xf0c <udc_process_setup+0x44c>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	61 c0       	rjmp	.+194    	; 0xf0c <udc_process_setup+0x44c>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	5f c0       	rjmp	.+190    	; 0xf0c <udc_process_setup+0x44c>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	5d c0       	rjmp	.+186    	; 0xf0c <udc_process_setup+0x44c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	5b c0       	rjmp	.+182    	; 0xf0c <udc_process_setup+0x44c>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	59 c0       	rjmp	.+178    	; 0xf0c <udc_process_setup+0x44c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e5a:	21 30       	cpi	r18, 0x01	; 1
     e5c:	01 f5       	brne	.+64     	; 0xe9e <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e5e:	80 91 79 21 	lds	r24, 0x2179
     e62:	8b 30       	cpi	r24, 0x0B	; 11
     e64:	e1 f4       	brne	.+56     	; 0xe9e <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e66:	80 91 7e 21 	lds	r24, 0x217E
     e6a:	90 91 7f 21 	lds	r25, 0x217F
     e6e:	89 2b       	or	r24, r25
     e70:	81 f4       	brne	.+32     	; 0xe92 <udc_process_setup+0x3d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     e72:	80 91 dc 20 	lds	r24, 0x20DC
     e76:	88 23       	and	r24, r24
     e78:	71 f0       	breq	.+28     	; 0xe96 <udc_process_setup+0x3d6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e7a:	c0 91 7c 21 	lds	r28, 0x217C
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     e7e:	d0 91 7a 21 	lds	r29, 0x217A

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     e82:	8c 2f       	mov	r24, r28
     e84:	79 dd       	rcall	.-1294   	; 0x978 <udc_iface_disable>
     e86:	88 23       	and	r24, r24
     e88:	41 f0       	breq	.+16     	; 0xe9a <udc_process_setup+0x3da>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     e8a:	6d 2f       	mov	r22, r29
     e8c:	8c 2f       	mov	r24, r28
     e8e:	40 dd       	rcall	.-1408   	; 0x910 <udc_iface_enable>
     e90:	3d c0       	rjmp	.+122    	; 0xf0c <udc_process_setup+0x44c>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	3b c0       	rjmp	.+118    	; 0xf0c <udc_process_setup+0x44c>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	39 c0       	rjmp	.+114    	; 0xf0c <udc_process_setup+0x44c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	37 c0       	rjmp	.+110    	; 0xf0c <udc_process_setup+0x44c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	b9 f5       	brne	.+110    	; 0xf10 <udc_process_setup+0x450>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ea2:	80 91 79 21 	lds	r24, 0x2179
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <udc_process_setup+0x3f0>
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	71 f5       	brne	.+92     	; 0xf0a <udc_process_setup+0x44a>
     eae:	14 c0       	rjmp	.+40     	; 0xed8 <udc_process_setup+0x418>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     eb0:	80 91 7e 21 	lds	r24, 0x217E
     eb4:	90 91 7f 21 	lds	r25, 0x217F
     eb8:	89 2b       	or	r24, r25
     eba:	51 f4       	brne	.+20     	; 0xed0 <udc_process_setup+0x410>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ebc:	80 91 7a 21 	lds	r24, 0x217A
     ec0:	90 91 7b 21 	lds	r25, 0x217B
     ec4:	89 2b       	or	r24, r25
     ec6:	31 f4       	brne	.+12     	; 0xed4 <udc_process_setup+0x414>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ec8:	80 91 7c 21 	lds	r24, 0x217C
     ecc:	c0 d4       	rcall	.+2432   	; 0x184e <udd_ep_clear_halt>
     ece:	1e c0       	rjmp	.+60     	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	1c c0       	rjmp	.+56     	; 0xf0c <udc_process_setup+0x44c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	1a c0       	rjmp	.+52     	; 0xf0c <udc_process_setup+0x44c>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ed8:	80 91 7e 21 	lds	r24, 0x217E
     edc:	90 91 7f 21 	lds	r25, 0x217F
     ee0:	89 2b       	or	r24, r25
     ee2:	69 f4       	brne	.+26     	; 0xefe <udc_process_setup+0x43e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ee4:	80 91 7a 21 	lds	r24, 0x217A
     ee8:	90 91 7b 21 	lds	r25, 0x217B
     eec:	89 2b       	or	r24, r25
     eee:	49 f4       	brne	.+18     	; 0xf02 <udc_process_setup+0x442>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ef0:	cc e7       	ldi	r28, 0x7C	; 124
     ef2:	d1 e2       	ldi	r29, 0x21	; 33
     ef4:	88 81       	ld	r24, Y
     ef6:	3a d5       	rcall	.+2676   	; 0x196c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ef8:	88 81       	ld	r24, Y
     efa:	5f d5       	rcall	.+2750   	; 0x19ba <udd_ep_set_halt>
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <udc_process_setup+0x44c>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <udc_process_setup+0x44c>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <udc_process_setup+0x44c>
				break;
			}
		}
#endif
	}
	return false;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <udc_process_setup+0x44c>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f0c:	81 11       	cpse	r24, r1
     f0e:	77 c0       	rjmp	.+238    	; 0xffe <udc_process_setup+0x53e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f10:	80 91 78 21 	lds	r24, 0x2178
     f14:	8f 71       	andi	r24, 0x1F	; 31
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	71 f5       	brne	.+92     	; 0xf76 <udc_process_setup+0x4b6>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f1a:	80 91 dc 20 	lds	r24, 0x20DC
     f1e:	88 23       	and	r24, r24
     f20:	51 f1       	breq	.+84     	; 0xf76 <udc_process_setup+0x4b6>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f22:	00 91 7c 21 	lds	r16, 0x217C
     f26:	10 91 7d 21 	lds	r17, 0x217D
     f2a:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f2c:	c0 91 dd 20 	lds	r28, 0x20DD
     f30:	d0 91 de 20 	lds	r29, 0x20DE
     f34:	e8 81       	ld	r30, Y
     f36:	f9 81       	ldd	r31, Y+1	; 0x01
     f38:	84 81       	ldd	r24, Z+4	; 0x04
     f3a:	08 17       	cp	r16, r24
     f3c:	e0 f4       	brcc	.+56     	; 0xf76 <udc_process_setup+0x4b6>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	80 2f       	mov	r24, r16
     f42:	a1 dc       	rcall	.-1726   	; 0x886 <udc_update_iface_desc>
     f44:	88 23       	and	r24, r24
     f46:	b9 f0       	breq	.+46     	; 0xf76 <udc_process_setup+0x4b6>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f48:	11 27       	eor	r17, r17
     f4a:	98 01       	movw	r18, r16
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	ea 81       	ldd	r30, Y+2	; 0x02
     f52:	fb 81       	ldd	r31, Y+3	; 0x03
     f54:	e2 0f       	add	r30, r18
     f56:	f3 1f       	adc	r31, r19
     f58:	c0 81       	ld	r28, Z
     f5a:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f5c:	ee 81       	ldd	r30, Y+6	; 0x06
     f5e:	ff 81       	ldd	r31, Y+7	; 0x07
     f60:	19 95       	eicall
     f62:	68 2f       	mov	r22, r24
     f64:	8f 2d       	mov	r24, r15
     f66:	8f dc       	rcall	.-1762   	; 0x886 <udc_update_iface_desc>
     f68:	88 23       	and	r24, r24
     f6a:	29 f0       	breq	.+10     	; 0xf76 <udc_process_setup+0x4b6>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f6c:	ec 81       	ldd	r30, Y+4	; 0x04
     f6e:	fd 81       	ldd	r31, Y+5	; 0x05
     f70:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f72:	81 11       	cpse	r24, r1
     f74:	46 c0       	rjmp	.+140    	; 0x1002 <udc_process_setup+0x542>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f76:	80 91 78 21 	lds	r24, 0x2178
     f7a:	8f 71       	andi	r24, 0x1F	; 31
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	09 f0       	breq	.+2      	; 0xf82 <udc_process_setup+0x4c2>
     f80:	42 c0       	rjmp	.+132    	; 0x1006 <udc_process_setup+0x546>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f82:	80 91 dc 20 	lds	r24, 0x20DC
     f86:	88 23       	and	r24, r24
     f88:	81 f1       	breq	.+96     	; 0xfea <udc_process_setup+0x52a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f8a:	e0 91 dd 20 	lds	r30, 0x20DD
     f8e:	f0 91 de 20 	lds	r31, 0x20DE
     f92:	a0 81       	ld	r26, Z
     f94:	b1 81       	ldd	r27, Z+1	; 0x01
     f96:	14 96       	adiw	r26, 0x04	; 4
     f98:	8c 91       	ld	r24, X
     f9a:	88 23       	and	r24, r24
     f9c:	41 f1       	breq	.+80     	; 0xfee <udc_process_setup+0x52e>
     f9e:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     fa0:	21 2f       	mov	r18, r17
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	02 80       	ldd	r0, Z+2	; 0x02
     faa:	f3 81       	ldd	r31, Z+3	; 0x03
     fac:	e0 2d       	mov	r30, r0
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	c0 81       	ld	r28, Z
     fb4:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fb6:	ee 81       	ldd	r30, Y+6	; 0x06
     fb8:	ff 81       	ldd	r31, Y+7	; 0x07
     fba:	19 95       	eicall
     fbc:	68 2f       	mov	r22, r24
     fbe:	81 2f       	mov	r24, r17
     fc0:	62 dc       	rcall	.-1852   	; 0x886 <udc_update_iface_desc>
     fc2:	88 23       	and	r24, r24
     fc4:	b1 f0       	breq	.+44     	; 0xff2 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     fc6:	ec 81       	ldd	r30, Y+4	; 0x04
     fc8:	fd 81       	ldd	r31, Y+5	; 0x05
     fca:	19 95       	eicall
     fcc:	81 11       	cpse	r24, r1
     fce:	13 c0       	rjmp	.+38     	; 0xff6 <udc_process_setup+0x536>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fd2:	e0 91 dd 20 	lds	r30, 0x20DD
     fd6:	f0 91 de 20 	lds	r31, 0x20DE
     fda:	a0 81       	ld	r26, Z
     fdc:	b1 81       	ldd	r27, Z+1	; 0x01
     fde:	14 96       	adiw	r26, 0x04	; 4
     fe0:	8c 91       	ld	r24, X
     fe2:	18 17       	cp	r17, r24
     fe4:	e8 f2       	brcs	.-70     	; 0xfa0 <udc_process_setup+0x4e0>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	1a c0       	rjmp	.+52     	; 0x101e <udc_process_setup+0x55e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	18 c0       	rjmp	.+48     	; 0x101e <udc_process_setup+0x55e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <udc_process_setup+0x55e>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <udc_process_setup+0x55e>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <udc_process_setup+0x55e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <udc_process_setup+0x55e>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e c0       	rjmp	.+28     	; 0x101e <udc_process_setup+0x55e>
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0c c0       	rjmp	.+24     	; 0x101e <udc_process_setup+0x55e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0a c0       	rjmp	.+20     	; 0x101e <udc_process_setup+0x55e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    100a:	82 2f       	mov	r24, r18
    100c:	80 76       	andi	r24, 0x60	; 96
    100e:	09 f0       	breq	.+2      	; 0x1012 <udc_process_setup+0x552>
    1010:	7f cf       	rjmp	.-258    	; 0xf10 <udc_process_setup+0x450>
    1012:	70 ce       	rjmp	.-800    	; 0xcf4 <udc_process_setup+0x234>
    1014:	32 2f       	mov	r19, r18
    1016:	30 76       	andi	r19, 0x60	; 96
    1018:	09 f0       	breq	.+2      	; 0x101c <udc_process_setup+0x55c>
    101a:	7a cf       	rjmp	.-268    	; 0xf10 <udc_process_setup+0x450>
    101c:	6f cd       	rjmp	.-1314   	; 0xafc <udc_process_setup+0x3c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	08 95       	ret

0000102a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    102a:	43 e0       	ldi	r20, 0x03	; 3
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	56 da       	rcall	.-2900   	; 0x4e2 <ioport_configure_port_pin>
    1036:	43 e0       	ldi	r20, 0x03	; 3
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	96 e0       	ldi	r25, 0x06	; 6
    1040:	50 da       	rcall	.-2912   	; 0x4e2 <ioport_configure_port_pin>
    1042:	43 e0       	ldi	r20, 0x03	; 3
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	64 e0       	ldi	r22, 0x04	; 4
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	4a da       	rcall	.-2924   	; 0x4e2 <ioport_configure_port_pin>
    104e:	43 e0       	ldi	r20, 0x03	; 3
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	68 e0       	ldi	r22, 0x08	; 8
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	44 da       	rcall	.-2936   	; 0x4e2 <ioport_configure_port_pin>
    105a:	43 e0       	ldi	r20, 0x03	; 3
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	60 e1       	ldi	r22, 0x10	; 16
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	96 e0       	ldi	r25, 0x06	; 6
    1064:	3e da       	rcall	.-2948   	; 0x4e2 <ioport_configure_port_pin>
    1066:	43 e0       	ldi	r20, 0x03	; 3
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	60 e2       	ldi	r22, 0x20	; 32
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	96 e0       	ldi	r25, 0x06	; 6
    1070:	38 da       	rcall	.-2960   	; 0x4e2 <ioport_configure_port_pin>
    1072:	43 e0       	ldi	r20, 0x03	; 3
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	60 e4       	ldi	r22, 0x40	; 64
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	32 da       	rcall	.-2972   	; 0x4e2 <ioport_configure_port_pin>
    107e:	43 e0       	ldi	r20, 0x03	; 3
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	60 e8       	ldi	r22, 0x80	; 128
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	96 e0       	ldi	r25, 0x06	; 6
    1088:	2c da       	rcall	.-2984   	; 0x4e2 <ioport_configure_port_pin>
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	58 e1       	ldi	r21, 0x18	; 24
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	96 e0       	ldi	r25, 0x06	; 6
    1094:	26 da       	rcall	.-2996   	; 0x4e2 <ioport_configure_port_pin>
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	58 e1       	ldi	r21, 0x18	; 24
    109a:	62 e0       	ldi	r22, 0x02	; 2
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	96 e0       	ldi	r25, 0x06	; 6
    10a0:	20 da       	rcall	.-3008   	; 0x4e2 <ioport_configure_port_pin>
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	58 e1       	ldi	r21, 0x18	; 24
    10a6:	64 e0       	ldi	r22, 0x04	; 4
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	96 e0       	ldi	r25, 0x06	; 6
    10ac:	1a da       	rcall	.-3020   	; 0x4e2 <ioport_configure_port_pin>
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	58 e1       	ldi	r21, 0x18	; 24
    10b2:	68 e0       	ldi	r22, 0x08	; 8
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	96 e0       	ldi	r25, 0x06	; 6
    10b8:	14 ca       	rjmp	.-3032   	; 0x4e2 <ioport_configure_port_pin>

000010ba <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    10ba:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    10bc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    10be:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    10c0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    10c2:	60 83       	st	Z, r22
	ret                             // Return to caller
    10c4:	08 95       	ret

000010c6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    10c6:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    10ca:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    10cc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    10ce:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    10d2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    10d4:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    10d8:	08 95       	ret

000010da <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    10da:	81 11       	cpse	r24, r1
    10dc:	18 c0       	rjmp	.+48     	; 0x110e <udd_sleep_mode+0x34>
    10de:	90 91 22 21 	lds	r25, 0x2122
    10e2:	99 23       	and	r25, r25
    10e4:	89 f0       	breq	.+34     	; 0x1108 <udd_sleep_mode+0x2e>
    10e6:	9f b7       	in	r25, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	e3 e7       	ldi	r30, 0x73	; 115
    10ec:	f1 e2       	ldi	r31, 0x21	; 33
    10ee:	20 81       	ld	r18, Z
    10f0:	21 50       	subi	r18, 0x01	; 1
    10f2:	20 83       	st	Z, r18
    10f4:	9f bf       	out	0x3f, r25	; 63
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <udd_sleep_mode+0x2e>
    10f8:	9f b7       	in	r25, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	e3 e7       	ldi	r30, 0x73	; 115
    10fe:	f1 e2       	ldi	r31, 0x21	; 33
    1100:	20 81       	ld	r18, Z
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	20 83       	st	Z, r18
    1106:	9f bf       	out	0x3f, r25	; 63
    1108:	80 93 22 21 	sts	0x2122, r24
    110c:	08 95       	ret
    110e:	90 91 22 21 	lds	r25, 0x2122
    1112:	99 23       	and	r25, r25
    1114:	89 f3       	breq	.-30     	; 0x10f8 <udd_sleep_mode+0x1e>
    1116:	f8 cf       	rjmp	.-16     	; 0x1108 <udd_sleep_mode+0x2e>

00001118 <udd_ep_get_ctrl>:
    1118:	28 2f       	mov	r18, r24
    111a:	2f 70       	andi	r18, 0x0F	; 15
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	99 27       	eor	r25, r25
    1124:	87 fd       	sbrc	r24, 7
    1126:	90 95       	com	r25
    1128:	88 27       	eor	r24, r24
    112a:	99 0f       	add	r25, r25
    112c:	88 1f       	adc	r24, r24
    112e:	99 27       	eor	r25, r25
    1130:	28 0f       	add	r18, r24
    1132:	39 1f       	adc	r19, r25
    1134:	22 0f       	add	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	24 51       	subi	r18, 0x14	; 20
    1142:	3f 4d       	sbci	r19, 0xDF	; 223
    1144:	82 2f       	mov	r24, r18
    1146:	93 2f       	mov	r25, r19
    1148:	08 95       	ret

0000114a <udd_ep_init>:
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	63 70       	andi	r22, 0x03	; 3
    1150:	61 30       	cpi	r22, 0x01	; 1
    1152:	29 f0       	breq	.+10     	; 0x115e <udd_ep_init+0x14>
    1154:	10 f4       	brcc	.+4      	; 0x115a <udd_ep_init+0x10>
    1156:	c0 e4       	ldi	r28, 0x40	; 64
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <udd_ep_init+0x16>
    115a:	c0 e8       	ldi	r28, 0x80	; 128
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <udd_ep_init+0x16>
    115e:	c0 ec       	ldi	r28, 0xC0	; 192
    1160:	40 38       	cpi	r20, 0x80	; 128
    1162:	51 05       	cpc	r21, r1
    1164:	e1 f0       	breq	.+56     	; 0x119e <udd_ep_init+0x54>
    1166:	50 f4       	brcc	.+20     	; 0x117c <udd_ep_init+0x32>
    1168:	40 32       	cpi	r20, 0x20	; 32
    116a:	51 05       	cpc	r21, r1
    116c:	a1 f0       	breq	.+40     	; 0x1196 <udd_ep_init+0x4c>
    116e:	40 34       	cpi	r20, 0x40	; 64
    1170:	51 05       	cpc	r21, r1
    1172:	99 f0       	breq	.+38     	; 0x119a <udd_ep_init+0x50>
    1174:	40 31       	cpi	r20, 0x10	; 16
    1176:	51 05       	cpc	r21, r1
    1178:	61 f4       	brne	.+24     	; 0x1192 <udd_ep_init+0x48>
    117a:	19 c0       	rjmp	.+50     	; 0x11ae <udd_ep_init+0x64>
    117c:	41 15       	cp	r20, r1
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	59 07       	cpc	r21, r25
    1182:	89 f0       	breq	.+34     	; 0x11a6 <udd_ep_init+0x5c>
    1184:	4f 3f       	cpi	r20, 0xFF	; 255
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	59 07       	cpc	r21, r25
    118a:	79 f0       	breq	.+30     	; 0x11aa <udd_ep_init+0x60>
    118c:	41 15       	cp	r20, r1
    118e:	51 40       	sbci	r21, 0x01	; 1
    1190:	41 f0       	breq	.+16     	; 0x11a2 <udd_ep_init+0x58>
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <udd_ep_init+0x66>
    1196:	d2 e0       	ldi	r29, 0x02	; 2
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <udd_ep_init+0x66>
    119a:	d3 e0       	ldi	r29, 0x03	; 3
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <udd_ep_init+0x66>
    119e:	d4 e0       	ldi	r29, 0x04	; 4
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <udd_ep_init+0x66>
    11a2:	d5 e0       	ldi	r29, 0x05	; 5
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <udd_ep_init+0x66>
    11a6:	d6 e0       	ldi	r29, 0x06	; 6
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <udd_ep_init+0x66>
    11aa:	d7 e0       	ldi	r29, 0x07	; 7
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <udd_ep_init+0x66>
    11ae:	d1 e0       	ldi	r29, 0x01	; 1
    11b0:	b3 df       	rcall	.-154    	; 0x1118 <udd_ep_get_ctrl>
    11b2:	fc 01       	movw	r30, r24
    11b4:	11 82       	std	Z+1, r1	; 0x01
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	80 83       	st	Z, r24
    11ba:	cd 2b       	or	r28, r29
    11bc:	c1 83       	std	Z+1, r28	; 0x01
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <udd_ctrl_init>:
    11c4:	0f 93       	push	r16
    11c6:	e8 ec       	ldi	r30, 0xC8	; 200
    11c8:	f4 e0       	ldi	r31, 0x04	; 4
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	80 83       	st	Z, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7d       	andi	r24, 0xDF	; 223
    11d4:	80 83       	st	Z, r24
    11d6:	e4 ef       	ldi	r30, 0xF4	; 244
    11d8:	f0 e2       	ldi	r31, 0x20	; 32
    11da:	02 e0       	ldi	r16, 0x02	; 2
    11dc:	05 93       	las	Z, r16
    11de:	10 92 f6 20 	sts	0x20F6, r1
    11e2:	10 92 f7 20 	sts	0x20F7, r1
    11e6:	00 e2       	ldi	r16, 0x20	; 32
    11e8:	06 93       	lac	Z, r16
    11ea:	00 e4       	ldi	r16, 0x40	; 64
    11ec:	06 93       	lac	Z, r16
    11ee:	ec ee       	ldi	r30, 0xEC	; 236
    11f0:	f0 e2       	ldi	r31, 0x20	; 32
    11f2:	00 e2       	ldi	r16, 0x20	; 32
    11f4:	06 93       	lac	Z, r16
    11f6:	00 e4       	ldi	r16, 0x40	; 64
    11f8:	06 93       	lac	Z, r16
    11fa:	10 92 84 21 	sts	0x2184, r1
    11fe:	10 92 85 21 	sts	0x2185, r1
    1202:	10 92 86 21 	sts	0x2186, r1
    1206:	10 92 87 21 	sts	0x2187, r1
    120a:	10 92 82 21 	sts	0x2182, r1
    120e:	10 92 83 21 	sts	0x2183, r1
    1212:	10 92 6b 21 	sts	0x216B, r1
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <udd_ctrl_stall_data>:
    121a:	0f 93       	push	r16
    121c:	85 e0       	ldi	r24, 0x05	; 5
    121e:	80 93 6b 21 	sts	0x216B, r24
    1222:	e5 ef       	ldi	r30, 0xF5	; 245
    1224:	f0 e2       	ldi	r31, 0x20	; 32
    1226:	04 e0       	ldi	r16, 0x04	; 4
    1228:	05 93       	las	Z, r16
    122a:	ed ee       	ldi	r30, 0xED	; 237
    122c:	f0 e2       	ldi	r31, 0x20	; 32
    122e:	04 e0       	ldi	r16, 0x04	; 4
    1230:	05 93       	las	Z, r16
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <udd_ctrl_send_zlp_in>:
    1236:	0f 93       	push	r16
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	80 93 6b 21 	sts	0x216B, r24
    123e:	10 92 f6 20 	sts	0x20F6, r1
    1242:	10 92 f7 20 	sts	0x20F7, r1
    1246:	e4 ef       	ldi	r30, 0xF4	; 244
    1248:	f0 e2       	ldi	r31, 0x20	; 32
    124a:	02 e0       	ldi	r16, 0x02	; 2
    124c:	06 93       	lac	Z, r16
    124e:	0f 91       	pop	r16
    1250:	08 95       	ret

00001252 <udd_ctrl_send_zlp_out>:
    1252:	0f 93       	push	r16
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	80 93 6b 21 	sts	0x216B, r24
    125a:	ec ee       	ldi	r30, 0xEC	; 236
    125c:	f0 e2       	ldi	r31, 0x20	; 32
    125e:	02 e0       	ldi	r16, 0x02	; 2
    1260:	06 93       	lac	Z, r16
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <udd_ctrl_endofrequest>:
    1266:	e0 91 84 21 	lds	r30, 0x2184
    126a:	f0 91 85 21 	lds	r31, 0x2185
    126e:	30 97       	sbiw	r30, 0x00	; 0
    1270:	09 f0       	breq	.+2      	; 0x1274 <udd_ctrl_endofrequest+0xe>
    1272:	19 95       	eicall
    1274:	08 95       	ret

00001276 <udd_ctrl_in_sent>:
    1276:	0f 93       	push	r16
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	80 91 6b 21 	lds	r24, 0x216B
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	19 f4       	brne	.+6      	; 0x128a <udd_ctrl_in_sent+0x14>
    1284:	f0 df       	rcall	.-32     	; 0x1266 <udd_ctrl_endofrequest>
    1286:	9e df       	rcall	.-196    	; 0x11c4 <udd_ctrl_init>
    1288:	5a c0       	rjmp	.+180    	; 0x133e <udd_ctrl_in_sent+0xc8>
    128a:	80 91 6e 21 	lds	r24, 0x216E
    128e:	90 91 6f 21 	lds	r25, 0x216F
    1292:	c0 91 82 21 	lds	r28, 0x2182
    1296:	d0 91 83 21 	lds	r29, 0x2183
    129a:	c8 1b       	sub	r28, r24
    129c:	d9 0b       	sbc	r29, r25
    129e:	41 f5       	brne	.+80     	; 0x12f0 <udd_ctrl_in_sent+0x7a>
    12a0:	20 91 6c 21 	lds	r18, 0x216C
    12a4:	30 91 6d 21 	lds	r19, 0x216D
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	80 93 6c 21 	sts	0x216C, r24
    12b0:	90 93 6d 21 	sts	0x216D, r25
    12b4:	20 91 7e 21 	lds	r18, 0x217E
    12b8:	30 91 7f 21 	lds	r19, 0x217F
    12bc:	82 17       	cp	r24, r18
    12be:	93 07       	cpc	r25, r19
    12c0:	21 f0       	breq	.+8      	; 0x12ca <udd_ctrl_in_sent+0x54>
    12c2:	80 91 70 21 	lds	r24, 0x2170
    12c6:	88 23       	and	r24, r24
    12c8:	11 f0       	breq	.+4      	; 0x12ce <udd_ctrl_in_sent+0x58>
    12ca:	c3 df       	rcall	.-122    	; 0x1252 <udd_ctrl_send_zlp_out>
    12cc:	38 c0       	rjmp	.+112    	; 0x133e <udd_ctrl_in_sent+0xc8>
    12ce:	e0 91 86 21 	lds	r30, 0x2186
    12d2:	f0 91 87 21 	lds	r31, 0x2187
    12d6:	30 97       	sbiw	r30, 0x00	; 0
    12d8:	99 f0       	breq	.+38     	; 0x1300 <udd_ctrl_in_sent+0x8a>
    12da:	19 95       	eicall
    12dc:	88 23       	and	r24, r24
    12de:	81 f0       	breq	.+32     	; 0x1300 <udd_ctrl_in_sent+0x8a>
    12e0:	10 92 6e 21 	sts	0x216E, r1
    12e4:	10 92 6f 21 	sts	0x216F, r1
    12e8:	c0 91 82 21 	lds	r28, 0x2182
    12ec:	d0 91 83 21 	lds	r29, 0x2183
    12f0:	c8 30       	cpi	r28, 0x08	; 8
    12f2:	d1 05       	cpc	r29, r1
    12f4:	28 f0       	brcs	.+10     	; 0x1300 <udd_ctrl_in_sent+0x8a>
    12f6:	10 92 70 21 	sts	0x2170, r1
    12fa:	c8 e0       	ldi	r28, 0x08	; 8
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <udd_ctrl_in_sent+0x90>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 70 21 	sts	0x2170, r24
    1306:	c0 93 f6 20 	sts	0x20F6, r28
    130a:	d0 93 f7 20 	sts	0x20F7, r29
    130e:	80 91 6e 21 	lds	r24, 0x216E
    1312:	90 91 6f 21 	lds	r25, 0x216F
    1316:	20 91 80 21 	lds	r18, 0x2180
    131a:	30 91 81 21 	lds	r19, 0x2181
    131e:	28 0f       	add	r18, r24
    1320:	39 1f       	adc	r19, r25
    1322:	20 93 f8 20 	sts	0x20F8, r18
    1326:	30 93 f9 20 	sts	0x20F9, r19
    132a:	c8 0f       	add	r28, r24
    132c:	d9 1f       	adc	r29, r25
    132e:	c0 93 6e 21 	sts	0x216E, r28
    1332:	d0 93 6f 21 	sts	0x216F, r29
    1336:	e4 ef       	ldi	r30, 0xF4	; 244
    1338:	f0 e2       	ldi	r31, 0x20	; 32
    133a:	02 e0       	ldi	r16, 0x02	; 2
    133c:	06 93       	lac	Z, r16
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <udd_ep_get_size>:
    1346:	fc 01       	movw	r30, r24
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	87 70       	andi	r24, 0x07	; 7
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	a9 f0       	breq	.+42     	; 0x137a <udd_ep_get_size+0x34>
    1350:	30 f4       	brcc	.+12     	; 0x135e <udd_ep_get_size+0x18>
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	61 f0       	breq	.+24     	; 0x136e <udd_ep_get_size+0x28>
    1356:	70 f4       	brcc	.+28     	; 0x1374 <udd_ep_get_size+0x2e>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	31 f4       	brne	.+12     	; 0x1368 <udd_ep_get_size+0x22>
    135c:	1a c0       	rjmp	.+52     	; 0x1392 <udd_ep_get_size+0x4c>
    135e:	86 30       	cpi	r24, 0x06	; 6
    1360:	91 f0       	breq	.+36     	; 0x1386 <udd_ep_get_size+0x40>
    1362:	70 f0       	brcs	.+28     	; 0x1380 <udd_ep_get_size+0x3a>
    1364:	87 30       	cpi	r24, 0x07	; 7
    1366:	91 f0       	breq	.+36     	; 0x138c <udd_ep_get_size+0x46>
    1368:	28 e0       	ldi	r18, 0x08	; 8
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <udd_ep_get_size+0x50>
    136e:	20 e2       	ldi	r18, 0x20	; 32
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <udd_ep_get_size+0x50>
    1374:	20 e4       	ldi	r18, 0x40	; 64
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <udd_ep_get_size+0x50>
    137a:	20 e8       	ldi	r18, 0x80	; 128
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	0b c0       	rjmp	.+22     	; 0x1396 <udd_ep_get_size+0x50>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	31 e0       	ldi	r19, 0x01	; 1
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <udd_ep_get_size+0x50>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	32 e0       	ldi	r19, 0x02	; 2
    138a:	05 c0       	rjmp	.+10     	; 0x1396 <udd_ep_get_size+0x50>
    138c:	2f ef       	ldi	r18, 0xFF	; 255
    138e:	33 e0       	ldi	r19, 0x03	; 3
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <udd_ep_get_size+0x50>
    1392:	20 e1       	ldi	r18, 0x10	; 16
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	82 2f       	mov	r24, r18
    1398:	93 2f       	mov	r25, r19
    139a:	08 95       	ret

0000139c <udd_ep_get_job>:
    139c:	28 2f       	mov	r18, r24
    139e:	2f 70       	andi	r18, 0x0F	; 15
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	99 27       	eor	r25, r25
    13a8:	87 fd       	sbrc	r24, 7
    13aa:	90 95       	com	r25
    13ac:	88 27       	eor	r24, r24
    13ae:	99 0f       	add	r25, r25
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 27       	eor	r25, r25
    13b4:	28 0f       	add	r18, r24
    13b6:	39 1f       	adc	r19, r25
    13b8:	22 50       	subi	r18, 0x02	; 2
    13ba:	31 09       	sbc	r19, r1
    13bc:	c9 01       	movw	r24, r18
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	28 0f       	add	r18, r24
    13cc:	39 1f       	adc	r19, r25
    13ce:	20 5f       	subi	r18, 0xF0	; 240
    13d0:	3e 4d       	sbci	r19, 0xDE	; 222
    13d2:	82 2f       	mov	r24, r18
    13d4:	93 2f       	mov	r25, r19
    13d6:	08 95       	ret

000013d8 <udd_ctrl_interrupt_tc_setup>:
    13d8:	0f 93       	push	r16
    13da:	80 91 cc 04 	lds	r24, 0x04CC
    13de:	80 ff       	sbrs	r24, 0
    13e0:	63 c0       	rjmp	.+198    	; 0x14a8 <udd_ctrl_interrupt_tc_setup+0xd0>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 cc 04 	sts	0x04CC, r24
    13e8:	ec ee       	ldi	r30, 0xEC	; 236
    13ea:	f0 e2       	ldi	r31, 0x20	; 32
    13ec:	00 e8       	ldi	r16, 0x80	; 128
    13ee:	06 93       	lac	Z, r16
    13f0:	e4 ef       	ldi	r30, 0xF4	; 244
    13f2:	f0 e2       	ldi	r31, 0x20	; 32
    13f4:	00 e8       	ldi	r16, 0x80	; 128
    13f6:	06 93       	lac	Z, r16
    13f8:	80 93 ca 04 	sts	0x04CA, r24
    13fc:	ec ee       	ldi	r30, 0xEC	; 236
    13fe:	f0 e2       	ldi	r31, 0x20	; 32
    1400:	00 e1       	ldi	r16, 0x10	; 16
    1402:	06 93       	lac	Z, r16
    1404:	80 91 6b 21 	lds	r24, 0x216B
    1408:	88 23       	and	r24, r24
    140a:	29 f0       	breq	.+10     	; 0x1416 <udd_ctrl_interrupt_tc_setup+0x3e>
    140c:	83 50       	subi	r24, 0x03	; 3
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	08 f4       	brcc	.+2      	; 0x1414 <udd_ctrl_interrupt_tc_setup+0x3c>
    1412:	29 df       	rcall	.-430    	; 0x1266 <udd_ctrl_endofrequest>
    1414:	d7 de       	rcall	.-594    	; 0x11c4 <udd_ctrl_init>
    1416:	80 91 ee 20 	lds	r24, 0x20EE
    141a:	90 91 ef 20 	lds	r25, 0x20EF
    141e:	08 97       	sbiw	r24, 0x08	; 8
    1420:	09 f0       	breq	.+2      	; 0x1424 <udd_ctrl_interrupt_tc_setup+0x4c>
    1422:	44 c0       	rjmp	.+136    	; 0x14ac <udd_ctrl_interrupt_tc_setup+0xd4>
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	e3 e6       	ldi	r30, 0x63	; 99
    1428:	f1 e2       	ldi	r31, 0x21	; 33
    142a:	a8 e7       	ldi	r26, 0x78	; 120
    142c:	b1 e2       	ldi	r27, 0x21	; 33
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	8a 95       	dec	r24
    1434:	e1 f7       	brne	.-8      	; 0x142e <udd_ctrl_interrupt_tc_setup+0x56>
    1436:	e8 ec       	ldi	r30, 0xC8	; 200
    1438:	f4 e0       	ldi	r31, 0x04	; 4
    143a:	80 81       	ld	r24, Z
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	80 83       	st	Z, r24
    1440:	80 81       	ld	r24, Z
    1442:	80 62       	ori	r24, 0x20	; 32
    1444:	80 83       	st	Z, r24
    1446:	3c db       	rcall	.-2440   	; 0xac0 <udc_process_setup>
    1448:	81 11       	cpse	r24, r1
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <udd_ctrl_interrupt_tc_setup+0x7a>
    144c:	e6 de       	rcall	.-564    	; 0x121a <udd_ctrl_stall_data>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	2e c0       	rjmp	.+92     	; 0x14ae <udd_ctrl_interrupt_tc_setup+0xd6>
    1452:	80 91 78 21 	lds	r24, 0x2178
    1456:	88 23       	and	r24, r24
    1458:	74 f4       	brge	.+28     	; 0x1476 <udd_ctrl_interrupt_tc_setup+0x9e>
    145a:	10 92 6c 21 	sts	0x216C, r1
    145e:	10 92 6d 21 	sts	0x216D, r1
    1462:	10 92 6e 21 	sts	0x216E, r1
    1466:	10 92 6f 21 	sts	0x216F, r1
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	80 93 6b 21 	sts	0x216B, r24
    1470:	02 df       	rcall	.-508    	; 0x1276 <udd_ctrl_in_sent>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	1c c0       	rjmp	.+56     	; 0x14ae <udd_ctrl_interrupt_tc_setup+0xd6>
    1476:	80 91 7e 21 	lds	r24, 0x217E
    147a:	90 91 7f 21 	lds	r25, 0x217F
    147e:	89 2b       	or	r24, r25
    1480:	19 f4       	brne	.+6      	; 0x1488 <udd_ctrl_interrupt_tc_setup+0xb0>
    1482:	d9 de       	rcall	.-590    	; 0x1236 <udd_ctrl_send_zlp_in>
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <udd_ctrl_interrupt_tc_setup+0xd6>
    1488:	10 92 6c 21 	sts	0x216C, r1
    148c:	10 92 6d 21 	sts	0x216D, r1
    1490:	10 92 6e 21 	sts	0x216E, r1
    1494:	10 92 6f 21 	sts	0x216F, r1
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 6b 21 	sts	0x216B, r24
    149e:	ec ee       	ldi	r30, 0xEC	; 236
    14a0:	f0 e2       	ldi	r31, 0x20	; 32
    14a2:	02 e0       	ldi	r16, 0x02	; 2
    14a4:	06 93       	lac	Z, r16
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <udd_ctrl_interrupt_tc_setup+0xd6>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <udd_ctrl_interrupt_tc_setup+0xd6>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <udd_ep_trans_complet>:
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	b8 2e       	mov	r11, r24
    14c6:	6a df       	rcall	.-300    	; 0x139c <udd_ep_get_job>
    14c8:	ec 01       	movw	r28, r24
    14ca:	8b 2d       	mov	r24, r11
    14cc:	25 de       	rcall	.-950    	; 0x1118 <udd_ep_get_ctrl>
    14ce:	7c 01       	movw	r14, r24
    14d0:	3a df       	rcall	.-396    	; 0x1346 <udd_ep_get_size>
    14d2:	6c 01       	movw	r12, r24
    14d4:	bb 20       	and	r11, r11
    14d6:	0c f0       	brlt	.+2      	; 0x14da <udd_ep_trans_complet+0x28>
    14d8:	5d c0       	rjmp	.+186    	; 0x1594 <udd_ep_trans_complet+0xe2>
    14da:	d7 01       	movw	r26, r14
    14dc:	16 96       	adiw	r26, 0x06	; 6
    14de:	2d 91       	ld	r18, X+
    14e0:	3c 91       	ld	r19, X
    14e2:	17 97       	sbiw	r26, 0x07	; 7
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	28 0f       	add	r18, r24
    14ea:	39 1f       	adc	r19, r25
    14ec:	2d 83       	std	Y+5, r18	; 0x05
    14ee:	3e 83       	std	Y+6, r19	; 0x06
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	28 17       	cp	r18, r24
    14f6:	39 07       	cpc	r19, r25
    14f8:	09 f4       	brne	.+2      	; 0x14fc <udd_ep_trans_complet+0x4a>
    14fa:	3a c0       	rjmp	.+116    	; 0x1570 <udd_ep_trans_complet+0xbe>
    14fc:	fc 01       	movw	r30, r24
    14fe:	e2 1b       	sub	r30, r18
    1500:	f3 0b       	sbc	r31, r19
    1502:	9f 01       	movw	r18, r30
    1504:	21 15       	cp	r18, r1
    1506:	f4 e0       	ldi	r31, 0x04	; 4
    1508:	3f 07       	cpc	r19, r31
    150a:	38 f0       	brcs	.+14     	; 0x151a <udd_ep_trans_complet+0x68>
    150c:	2f ef       	ldi	r18, 0xFF	; 255
    150e:	33 e0       	ldi	r19, 0x03	; 3
    1510:	c9 01       	movw	r24, r18
    1512:	b6 01       	movw	r22, r12
    1514:	6e d4       	rcall	.+2268   	; 0x1df2 <__udivmodhi4>
    1516:	28 1b       	sub	r18, r24
    1518:	39 0b       	sbc	r19, r25
    151a:	88 81       	ld	r24, Y
    151c:	81 ff       	sbrs	r24, 1
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <udd_ep_trans_complet+0x84>
    1520:	c9 01       	movw	r24, r18
    1522:	b6 01       	movw	r22, r12
    1524:	66 d4       	rcall	.+2252   	; 0x1df2 <__udivmodhi4>
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	89 2b       	or	r24, r25
    152c:	11 f0       	breq	.+4      	; 0x1532 <udd_ep_trans_complet+0x80>
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	ca 01       	movw	r24, r20
    1534:	02 c0       	rjmp	.+4      	; 0x153a <udd_ep_trans_complet+0x88>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 81       	ld	r25, Y
    153c:	80 fb       	bst	r24, 0
    153e:	91 f9       	bld	r25, 1
    1540:	98 83       	st	Y, r25
    1542:	d7 01       	movw	r26, r14
    1544:	16 96       	adiw	r26, 0x06	; 6
    1546:	1d 92       	st	X+, r1
    1548:	1c 92       	st	X, r1
    154a:	17 97       	sbiw	r26, 0x07	; 7
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	2d 93       	st	X+, r18
    1550:	3c 93       	st	X, r19
    1552:	13 97       	sbiw	r26, 0x03	; 3
    1554:	29 81       	ldd	r18, Y+1	; 0x01
    1556:	3a 81       	ldd	r19, Y+2	; 0x02
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	14 96       	adiw	r26, 0x04	; 4
    1562:	8d 93       	st	X+, r24
    1564:	9c 93       	st	X, r25
    1566:	15 97       	sbiw	r26, 0x05	; 5
    1568:	f7 01       	movw	r30, r14
    156a:	02 e0       	ldi	r16, 0x02	; 2
    156c:	06 93       	lac	Z, r16
    156e:	98 c0       	rjmp	.+304    	; 0x16a0 <udd_ep_trans_complet+0x1ee>
    1570:	88 81       	ld	r24, Y
    1572:	81 ff       	sbrs	r24, 1
    1574:	87 c0       	rjmp	.+270    	; 0x1684 <udd_ep_trans_complet+0x1d2>
    1576:	8d 7f       	andi	r24, 0xFD	; 253
    1578:	88 83       	st	Y, r24
    157a:	d7 01       	movw	r26, r14
    157c:	16 96       	adiw	r26, 0x06	; 6
    157e:	1d 92       	st	X+, r1
    1580:	1c 92       	st	X, r1
    1582:	17 97       	sbiw	r26, 0x07	; 7
    1584:	12 96       	adiw	r26, 0x02	; 2
    1586:	1d 92       	st	X+, r1
    1588:	1c 92       	st	X, r1
    158a:	13 97       	sbiw	r26, 0x03	; 3
    158c:	f7 01       	movw	r30, r14
    158e:	02 e0       	ldi	r16, 0x02	; 2
    1590:	06 93       	lac	Z, r16
    1592:	86 c0       	rjmp	.+268    	; 0x16a0 <udd_ep_trans_complet+0x1ee>
    1594:	d7 01       	movw	r26, r14
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	0d 91       	ld	r16, X+
    159a:	1c 91       	ld	r17, X
    159c:	13 97       	sbiw	r26, 0x03	; 3
    159e:	88 81       	ld	r24, Y
    15a0:	82 ff       	sbrs	r24, 2
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <udd_ep_trans_complet+0x120>
    15a4:	29 81       	ldd	r18, Y+1	; 0x01
    15a6:	3a 81       	ldd	r19, Y+2	; 0x02
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	28 0f       	add	r18, r24
    15ae:	39 1f       	adc	r19, r25
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	b6 01       	movw	r22, r12
    15b6:	1d d4       	rcall	.+2106   	; 0x1df2 <__udivmodhi4>
    15b8:	b0 e4       	ldi	r27, 0x40	; 64
    15ba:	bb 9e       	mul	r11, r27
    15bc:	f0 01       	movw	r30, r0
    15be:	11 24       	eor	r1, r1
    15c0:	ed 51       	subi	r30, 0x1D	; 29
    15c2:	ff 4d       	sbci	r31, 0xDF	; 223
    15c4:	48 2f       	mov	r20, r24
    15c6:	59 2f       	mov	r21, r25
    15c8:	6e 2f       	mov	r22, r30
    15ca:	7f 2f       	mov	r23, r31
    15cc:	82 2f       	mov	r24, r18
    15ce:	93 2f       	mov	r25, r19
    15d0:	24 d4       	rcall	.+2120   	; 0x1e1a <memcpy>
    15d2:	2d 81       	ldd	r18, Y+5	; 0x05
    15d4:	3e 81       	ldd	r19, Y+6	; 0x06
    15d6:	20 0f       	add	r18, r16
    15d8:	31 1f       	adc	r19, r17
    15da:	2d 83       	std	Y+5, r18	; 0x05
    15dc:	3e 83       	std	Y+6, r19	; 0x06
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	e2 17       	cp	r30, r18
    15e4:	f3 07       	cpc	r31, r19
    15e6:	10 f4       	brcc	.+4      	; 0x15ec <udd_ep_trans_complet+0x13a>
    15e8:	ed 83       	std	Y+5, r30	; 0x05
    15ea:	fe 83       	std	Y+6, r31	; 0x06
    15ec:	d7 01       	movw	r26, r14
    15ee:	16 96       	adiw	r26, 0x06	; 6
    15f0:	2d 91       	ld	r18, X+
    15f2:	3c 91       	ld	r19, X
    15f4:	17 97       	sbiw	r26, 0x07	; 7
    15f6:	20 17       	cp	r18, r16
    15f8:	31 07       	cpc	r19, r17
    15fa:	09 f0       	breq	.+2      	; 0x15fe <udd_ep_trans_complet+0x14c>
    15fc:	43 c0       	rjmp	.+134    	; 0x1684 <udd_ep_trans_complet+0x1d2>
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	e8 17       	cp	r30, r24
    1604:	f9 07       	cpc	r31, r25
    1606:	09 f4       	brne	.+2      	; 0x160a <udd_ep_trans_complet+0x158>
    1608:	3d c0       	rjmp	.+122    	; 0x1684 <udd_ep_trans_complet+0x1d2>
    160a:	e8 1b       	sub	r30, r24
    160c:	f9 0b       	sbc	r31, r25
    160e:	e1 15       	cp	r30, r1
    1610:	b4 e0       	ldi	r27, 0x04	; 4
    1612:	fb 07       	cpc	r31, r27
    1614:	40 f0       	brcs	.+16     	; 0x1626 <udd_ep_trans_complet+0x174>
    1616:	ef ef       	ldi	r30, 0xFF	; 255
    1618:	f3 e0       	ldi	r31, 0x03	; 3
    161a:	cf 01       	movw	r24, r30
    161c:	b6 01       	movw	r22, r12
    161e:	e9 d3       	rcall	.+2002   	; 0x1df2 <__udivmodhi4>
    1620:	e8 1b       	sub	r30, r24
    1622:	f9 0b       	sbc	r31, r25
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <udd_ep_trans_complet+0x17e>
    1626:	cf 01       	movw	r24, r30
    1628:	b6 01       	movw	r22, r12
    162a:	e3 d3       	rcall	.+1990   	; 0x1df2 <__udivmodhi4>
    162c:	e8 1b       	sub	r30, r24
    162e:	f9 0b       	sbc	r31, r25
    1630:	d7 01       	movw	r26, r14
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	1d 92       	st	X+, r1
    1636:	1c 92       	st	X, r1
    1638:	13 97       	sbiw	r26, 0x03	; 3
    163a:	ec 15       	cp	r30, r12
    163c:	fd 05       	cpc	r31, r13
    163e:	78 f4       	brcc	.+30     	; 0x165e <udd_ep_trans_complet+0x1ac>
    1640:	88 81       	ld	r24, Y
    1642:	84 60       	ori	r24, 0x04	; 4
    1644:	88 83       	st	Y, r24
    1646:	b0 e4       	ldi	r27, 0x40	; 64
    1648:	bb 9e       	mul	r11, r27
    164a:	c0 01       	movw	r24, r0
    164c:	11 24       	eor	r1, r1
    164e:	8d 51       	subi	r24, 0x1D	; 29
    1650:	9f 4d       	sbci	r25, 0xDF	; 223
    1652:	f7 01       	movw	r30, r14
    1654:	84 83       	std	Z+4, r24	; 0x04
    1656:	95 83       	std	Z+5, r25	; 0x05
    1658:	c6 82       	std	Z+6, r12	; 0x06
    165a:	d7 82       	std	Z+7, r13	; 0x07
    165c:	0f c0       	rjmp	.+30     	; 0x167c <udd_ep_trans_complet+0x1ca>
    165e:	29 81       	ldd	r18, Y+1	; 0x01
    1660:	3a 81       	ldd	r19, Y+2	; 0x02
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	d7 01       	movw	r26, r14
    166c:	14 96       	adiw	r26, 0x04	; 4
    166e:	8d 93       	st	X+, r24
    1670:	9c 93       	st	X, r25
    1672:	15 97       	sbiw	r26, 0x05	; 5
    1674:	16 96       	adiw	r26, 0x06	; 6
    1676:	ed 93       	st	X+, r30
    1678:	fc 93       	st	X, r31
    167a:	17 97       	sbiw	r26, 0x07	; 7
    167c:	f7 01       	movw	r30, r14
    167e:	02 e0       	ldi	r16, 0x02	; 2
    1680:	06 93       	lac	Z, r16
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <udd_ep_trans_complet+0x1ee>
    1684:	88 81       	ld	r24, Y
    1686:	80 ff       	sbrs	r24, 0
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <udd_ep_trans_complet+0x1ee>
    168a:	8e 7f       	andi	r24, 0xFE	; 254
    168c:	88 83       	st	Y, r24
    168e:	ef 81       	ldd	r30, Y+7	; 0x07
    1690:	f8 85       	ldd	r31, Y+8	; 0x08
    1692:	30 97       	sbiw	r30, 0x00	; 0
    1694:	29 f0       	breq	.+10     	; 0x16a0 <udd_ep_trans_complet+0x1ee>
    1696:	6d 81       	ldd	r22, Y+5	; 0x05
    1698:	7e 81       	ldd	r23, Y+6	; 0x06
    169a:	4b 2d       	mov	r20, r11
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	19 95       	eicall
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	08 95       	ret

000016b4 <udd_attach>:
    16b4:	cf 93       	push	r28
    16b6:	cf b7       	in	r28, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	0e dd       	rcall	.-1508   	; 0x10da <udd_sleep_mode>
    16be:	ea ec       	ldi	r30, 0xCA	; 202
    16c0:	f4 e0       	ldi	r31, 0x04	; 4
    16c2:	80 e4       	ldi	r24, 0x40	; 64
    16c4:	80 83       	st	Z, r24
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	80 83       	st	Z, r24
    16ca:	e1 ec       	ldi	r30, 0xC1	; 193
    16cc:	f4 e0       	ldi	r31, 0x04	; 4
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
    16d4:	a9 ec       	ldi	r26, 0xC9	; 201
    16d6:	b4 e0       	ldi	r27, 0x04	; 4
    16d8:	8c 91       	ld	r24, X
    16da:	82 60       	ori	r24, 0x02	; 2
    16dc:	8c 93       	st	X, r24
    16de:	e8 ec       	ldi	r30, 0xC8	; 200
    16e0:	f4 e0       	ldi	r31, 0x04	; 4
    16e2:	80 81       	ld	r24, Z
    16e4:	80 64       	ori	r24, 0x40	; 64
    16e6:	80 83       	st	Z, r24
    16e8:	8c 91       	ld	r24, X
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	8c 93       	st	X, r24
    16ee:	80 81       	ld	r24, Z
    16f0:	80 68       	ori	r24, 0x80	; 128
    16f2:	80 83       	st	Z, r24
    16f4:	cf bf       	out	0x3f, r28	; 63
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <udd_enable>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	c0 e6       	ldi	r28, 0x60	; 96
    1700:	d0 e0       	ldi	r29, 0x00	; 0
    1702:	18 82       	st	Y, r1
    1704:	80 e3       	ldi	r24, 0x30	; 48
    1706:	0e 94 3c 02 	call	0x478	; 0x478 <sysclk_enable_usb>
    170a:	e0 ec       	ldi	r30, 0xC0	; 192
    170c:	f4 e0       	ldi	r31, 0x04	; 4
    170e:	80 81       	ld	r24, Z
    1710:	80 64       	ori	r24, 0x40	; 64
    1712:	80 83       	st	Z, r24
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	88 83       	st	Y, r24
    1718:	cf b7       	in	r28, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	10 92 ed 20 	sts	0x20ED, r1
    1720:	10 92 f5 20 	sts	0x20F5, r1
    1724:	10 92 fd 20 	sts	0x20FD, r1
    1728:	10 92 05 21 	sts	0x2105, r1
    172c:	e0 e1       	ldi	r30, 0x10	; 16
    172e:	f1 e2       	ldi	r31, 0x21	; 33
    1730:	80 81       	ld	r24, Z
    1732:	8e 7f       	andi	r24, 0xFE	; 254
    1734:	80 83       	st	Z, r24
    1736:	e9 e1       	ldi	r30, 0x19	; 25
    1738:	f1 e2       	ldi	r31, 0x21	; 33
    173a:	80 81       	ld	r24, Z
    173c:	8e 7f       	andi	r24, 0xFE	; 254
    173e:	80 83       	st	Z, r24
    1740:	6a e1       	ldi	r22, 0x1A	; 26
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	bf dc       	rcall	.-1666   	; 0x10c6 <nvm_read_byte>
    1748:	8f 3f       	cpi	r24, 0xFF	; 255
    174a:	19 f0       	breq	.+6      	; 0x1752 <udd_enable+0x58>
    174c:	80 93 fa 04 	sts	0x04FA, r24
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <udd_enable+0x5e>
    1752:	8f e1       	ldi	r24, 0x1F	; 31
    1754:	80 93 fa 04 	sts	0x04FA, r24
    1758:	6b e1       	ldi	r22, 0x1B	; 27
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	b3 dc       	rcall	.-1690   	; 0x10c6 <nvm_read_byte>
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	19 f0       	breq	.+6      	; 0x176a <udd_enable+0x70>
    1764:	80 93 fb 04 	sts	0x04FB, r24
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <udd_enable+0x76>
    176a:	8f e1       	ldi	r24, 0x1F	; 31
    176c:	80 93 fb 04 	sts	0x04FB, r24
    1770:	e0 ec       	ldi	r30, 0xC0	; 192
    1772:	f4 e0       	ldi	r31, 0x04	; 4
    1774:	80 81       	ld	r24, Z
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	80 83       	st	Z, r24
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	80 83       	st	Z, r24
    1780:	80 81       	ld	r24, Z
    1782:	80 61       	ori	r24, 0x10	; 16
    1784:	80 83       	st	Z, r24
    1786:	8c ee       	ldi	r24, 0xEC	; 236
    1788:	90 e2       	ldi	r25, 0x20	; 32
    178a:	86 83       	std	Z+6, r24	; 0x06
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	80 81       	ld	r24, Z
    1790:	80 62       	ori	r24, 0x20	; 32
    1792:	80 83       	st	Z, r24
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	80 93 c5 04 	sts	0x04C5, r24
    179a:	e8 ec       	ldi	r30, 0xC8	; 200
    179c:	f4 e0       	ldi	r31, 0x04	; 4
    179e:	80 81       	ld	r24, Z
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	80 83       	st	Z, r24
    17a4:	10 92 22 21 	sts	0x2122, r1
    17a8:	8f b7       	in	r24, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	e7 e7       	ldi	r30, 0x77	; 119
    17ae:	f1 e2       	ldi	r31, 0x21	; 33
    17b0:	90 81       	ld	r25, Z
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	90 83       	st	Z, r25
    17b6:	8f bf       	out	0x3f, r24	; 63
    17b8:	7d df       	rcall	.-262    	; 0x16b4 <udd_attach>
    17ba:	cf bf       	out	0x3f, r28	; 63
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <udd_set_address>:
    17c2:	80 93 c3 04 	sts	0x04C3, r24
    17c6:	08 95       	ret

000017c8 <udd_getaddress>:
    17c8:	80 91 c3 04 	lds	r24, 0x04C3
    17cc:	08 95       	ret

000017ce <udd_get_frame_number>:
    17ce:	20 91 0c 21 	lds	r18, 0x210C
    17d2:	30 91 0d 21 	lds	r19, 0x210D
    17d6:	82 2f       	mov	r24, r18
    17d8:	93 2f       	mov	r25, r19
    17da:	08 95       	ret

000017dc <udd_set_setup_payload>:
    17dc:	80 93 80 21 	sts	0x2180, r24
    17e0:	90 93 81 21 	sts	0x2181, r25
    17e4:	60 93 82 21 	sts	0x2182, r22
    17e8:	70 93 83 21 	sts	0x2183, r23
    17ec:	08 95       	ret

000017ee <udd_ep_alloc>:
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	f8 2e       	mov	r15, r24
    17fc:	e6 2e       	mov	r14, r22
    17fe:	8a 01       	movw	r16, r20
    1800:	8b dc       	rcall	.-1770   	; 0x1118 <udd_ep_get_ctrl>
    1802:	ec 01       	movw	r28, r24
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	80 7c       	andi	r24, 0xC0	; 192
    1808:	89 f4       	brne	.+34     	; 0x182c <udd_ep_alloc+0x3e>
    180a:	a8 01       	movw	r20, r16
    180c:	6e 2d       	mov	r22, r14
    180e:	8f 2d       	mov	r24, r15
    1810:	9c dc       	rcall	.-1736   	; 0x114a <udd_ep_init>
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	80 7c       	andi	r24, 0xC0	; 192
    1816:	80 3c       	cpi	r24, 0xC0	; 192
    1818:	21 f4       	brne	.+8      	; 0x1822 <udd_ep_alloc+0x34>
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	87 70       	andi	r24, 0x07	; 7
    181e:	87 30       	cpi	r24, 0x07	; 7
    1820:	39 f0       	breq	.+14     	; 0x1830 <udd_ep_alloc+0x42>
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	80 62       	ori	r24, 0x20	; 32
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <udd_ep_alloc+0x44>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <udd_ep_alloc+0x44>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	08 95       	ret

00001840 <udd_ep_is_halted>:
    1840:	6b dc       	rcall	.-1834   	; 0x1118 <udd_ep_get_ctrl>
    1842:	fc 01       	movw	r30, r24
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	82 fb       	bst	r24, 2
    1848:	88 27       	eor	r24, r24
    184a:	80 f9       	bld	r24, 0
    184c:	08 95       	ret

0000184e <udd_ep_clear_halt>:
    184e:	cf 93       	push	r28
    1850:	c8 2f       	mov	r28, r24
    1852:	62 dc       	rcall	.-1852   	; 0x1118 <udd_ep_get_ctrl>
    1854:	fc 01       	movw	r30, r24
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	82 ff       	sbrs	r24, 2
    185a:	0f c0       	rjmp	.+30     	; 0x187a <udd_ep_clear_halt+0x2c>
    185c:	81 81       	ldd	r24, Z+1	; 0x01
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	81 83       	std	Z+1, r24	; 0x01
    1862:	8c 2f       	mov	r24, r28
    1864:	9b dd       	rcall	.-1226   	; 0x139c <udd_ep_get_job>
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	80 ff       	sbrs	r24, 0
    186c:	06 c0       	rjmp	.+12     	; 0x187a <udd_ep_clear_halt+0x2c>
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	80 83       	st	Z, r24
    1872:	07 80       	ldd	r0, Z+7	; 0x07
    1874:	f0 85       	ldd	r31, Z+8	; 0x08
    1876:	e0 2d       	mov	r30, r0
    1878:	19 95       	eicall
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <udd_ep_run>:
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	98 2e       	mov	r9, r24
    189a:	86 2e       	mov	r8, r22
    189c:	5a 01       	movw	r10, r20
    189e:	69 01       	movw	r12, r18
    18a0:	7d dd       	rcall	.-1286   	; 0x139c <udd_ep_get_job>
    18a2:	7c 01       	movw	r14, r24
    18a4:	89 2d       	mov	r24, r9
    18a6:	38 dc       	rcall	.-1936   	; 0x1118 <udd_ep_get_ctrl>
    18a8:	ec 01       	movw	r28, r24
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	80 7c       	andi	r24, 0xC0	; 192
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <udd_ep_run+0x32>
    18b0:	4d c0       	rjmp	.+154    	; 0x194c <udd_ep_run+0xcc>
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	80 7c       	andi	r24, 0xC0	; 192
    18b6:	80 3c       	cpi	r24, 0xC0	; 192
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <udd_ep_run+0x40>
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	82 fd       	sbrc	r24, 2
    18be:	48 c0       	rjmp	.+144    	; 0x1950 <udd_ep_run+0xd0>
    18c0:	8f b7       	in	r24, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	f7 01       	movw	r30, r14
    18c6:	90 81       	ld	r25, Z
    18c8:	90 ff       	sbrs	r25, 0
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <udd_ep_run+0x52>
    18cc:	8f bf       	out	0x3f, r24	; 63
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	40 c0       	rjmp	.+128    	; 0x1952 <udd_ep_run+0xd2>
    18d2:	f7 01       	movw	r30, r14
    18d4:	90 81       	ld	r25, Z
    18d6:	91 60       	ori	r25, 0x01	; 1
    18d8:	90 83       	st	Z, r25
    18da:	8f bf       	out	0x3f, r24	; 63
    18dc:	a1 82       	std	Z+1, r10	; 0x01
    18de:	b2 82       	std	Z+2, r11	; 0x02
    18e0:	c3 82       	std	Z+3, r12	; 0x03
    18e2:	d4 82       	std	Z+4, r13	; 0x04
    18e4:	15 82       	std	Z+5, r1	; 0x05
    18e6:	16 82       	std	Z+6, r1	; 0x06
    18e8:	07 83       	std	Z+7, r16	; 0x07
    18ea:	10 87       	std	Z+8, r17	; 0x08
    18ec:	81 10       	cpse	r8, r1
    18ee:	08 c0       	rjmp	.+16     	; 0x1900 <udd_ep_run+0x80>
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	c1 14       	cp	r12, r1
    18f6:	d1 04       	cpc	r13, r1
    18f8:	29 f0       	breq	.+10     	; 0x1904 <udd_ep_run+0x84>
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <udd_ep_run+0x84>
    1900:	21 e0       	ldi	r18, 0x01	; 1
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f7 01       	movw	r30, r14
    1906:	80 81       	ld	r24, Z
    1908:	20 fb       	bst	r18, 0
    190a:	81 f9       	bld	r24, 1
    190c:	8b 7f       	andi	r24, 0xFB	; 251
    190e:	80 83       	st	Z, r24
    1910:	99 20       	and	r9, r9
    1912:	1c f4       	brge	.+6      	; 0x191a <udd_ep_run+0x9a>
    1914:	1e 82       	std	Y+6, r1	; 0x06
    1916:	1f 82       	std	Y+7, r1	; 0x07
    1918:	15 c0       	rjmp	.+42     	; 0x1944 <udd_ep_run+0xc4>
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	80 7c       	andi	r24, 0xC0	; 192
    191e:	80 3c       	cpi	r24, 0xC0	; 192
    1920:	69 f4       	brne	.+26     	; 0x193c <udd_ep_run+0xbc>
    1922:	ce 01       	movw	r24, r28
    1924:	10 dd       	rcall	.-1504   	; 0x1346 <udd_ep_get_size>
    1926:	bc 01       	movw	r22, r24
    1928:	c6 01       	movw	r24, r12
    192a:	63 d2       	rcall	.+1222   	; 0x1df2 <__udivmodhi4>
    192c:	89 2b       	or	r24, r25
    192e:	31 f0       	breq	.+12     	; 0x193c <udd_ep_run+0xbc>
    1930:	f7 01       	movw	r30, r14
    1932:	80 81       	ld	r24, Z
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	80 83       	st	Z, r24
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0b c0       	rjmp	.+22     	; 0x1952 <udd_ep_run+0xd2>
    193c:	1a 82       	std	Y+2, r1	; 0x02
    193e:	1b 82       	std	Y+3, r1	; 0x03
    1940:	1e 82       	std	Y+6, r1	; 0x06
    1942:	1f 82       	std	Y+7, r1	; 0x07
    1944:	89 2d       	mov	r24, r9
    1946:	b5 dd       	rcall	.-1174   	; 0x14b2 <udd_ep_trans_complet>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <udd_ep_run+0xd2>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <udd_ep_run+0xd2>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	08 95       	ret

0000196c <udd_ep_abort>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	18 2f       	mov	r17, r24
    1976:	d0 db       	rcall	.-2144   	; 0x1118 <udd_ep_get_ctrl>
    1978:	ec 01       	movw	r28, r24
    197a:	81 2f       	mov	r24, r17
    197c:	0f dd       	rcall	.-1506   	; 0x139c <udd_ep_get_job>
    197e:	dc 01       	movw	r26, r24
    1980:	fe 01       	movw	r30, r28
    1982:	02 e0       	ldi	r16, 0x02	; 2
    1984:	05 93       	las	Z, r16
    1986:	8c 91       	ld	r24, X
    1988:	80 ff       	sbrs	r24, 0
    198a:	12 c0       	rjmp	.+36     	; 0x19b0 <udd_ep_abort+0x44>
    198c:	8e 7f       	andi	r24, 0xFE	; 254
    198e:	8c 93       	st	X, r24
    1990:	17 96       	adiw	r26, 0x07	; 7
    1992:	ed 91       	ld	r30, X+
    1994:	fc 91       	ld	r31, X
    1996:	18 97       	sbiw	r26, 0x08	; 8
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	51 f0       	breq	.+20     	; 0x19b0 <udd_ep_abort+0x44>
    199c:	11 23       	and	r17, r17
    199e:	1c f4       	brge	.+6      	; 0x19a6 <udd_ep_abort+0x3a>
    19a0:	6e 81       	ldd	r22, Y+6	; 0x06
    19a2:	7f 81       	ldd	r23, Y+7	; 0x07
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <udd_ep_abort+0x3e>
    19a6:	6a 81       	ldd	r22, Y+2	; 0x02
    19a8:	7b 81       	ldd	r23, Y+3	; 0x03
    19aa:	41 2f       	mov	r20, r17
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	19 95       	eicall
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <udd_ep_set_halt>:
    19ba:	0f 93       	push	r16
    19bc:	cf 93       	push	r28
    19be:	c8 2f       	mov	r28, r24
    19c0:	ab db       	rcall	.-2218   	; 0x1118 <udd_ep_get_ctrl>
    19c2:	fc 01       	movw	r30, r24
    19c4:	81 81       	ldd	r24, Z+1	; 0x01
    19c6:	84 60       	ori	r24, 0x04	; 4
    19c8:	81 83       	std	Z+1, r24	; 0x01
    19ca:	01 e0       	ldi	r16, 0x01	; 1
    19cc:	06 93       	lac	Z, r16
    19ce:	8c 2f       	mov	r24, r28
    19d0:	cd df       	rcall	.-102    	; 0x196c <udd_ep_abort>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	cf 91       	pop	r28
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <udd_ep_free>:
    19da:	cf 93       	push	r28
    19dc:	c8 2f       	mov	r28, r24
    19de:	c6 df       	rcall	.-116    	; 0x196c <udd_ep_abort>
    19e0:	8c 2f       	mov	r24, r28
    19e2:	9a db       	rcall	.-2252   	; 0x1118 <udd_ep_get_ctrl>
    19e4:	fc 01       	movw	r30, r24
    19e6:	11 82       	std	Z+1, r1	; 0x01
    19e8:	cf 91       	pop	r28
    19ea:	08 95       	ret

000019ec <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	08 b6       	in	r0, 0x38	; 56
    19f8:	0f 92       	push	r0
    19fa:	18 be       	out	0x38, r1	; 56
    19fc:	09 b6       	in	r0, 0x39	; 57
    19fe:	0f 92       	push	r0
    1a00:	19 be       	out	0x39, r1	; 57
    1a02:	0b b6       	in	r0, 0x3b	; 59
    1a04:	0f 92       	push	r0
    1a06:	1b be       	out	0x3b, r1	; 59
    1a08:	0f 93       	push	r16
    1a0a:	2f 93       	push	r18
    1a0c:	3f 93       	push	r19
    1a0e:	4f 93       	push	r20
    1a10:	5f 93       	push	r21
    1a12:	6f 93       	push	r22
    1a14:	7f 93       	push	r23
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	af 93       	push	r26
    1a1c:	bf 93       	push	r27
    1a1e:	ef 93       	push	r30
    1a20:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1a22:	80 91 cb 04 	lds	r24, 0x04CB
    1a26:	88 23       	and	r24, r24
    1a28:	34 f4       	brge	.+12     	; 0x1a36 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1a30:	18 d8       	rcall	.-4048   	; 0xa62 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    1a32:	ca d1       	rcall	.+916    	; 0x1dc8 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    1a34:	7c c0       	rjmp	.+248    	; 0x1b2e <__vector_125+0x142>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1a36:	80 91 cb 04 	lds	r24, 0x04CB
    1a3a:	82 ff       	sbrs	r24, 2
    1a3c:	20 c0       	rjmp	.+64     	; 0x1a7e <__vector_125+0x92>
		udd_ack_underflow_event();
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1a44:	80 91 f4 20 	lds	r24, 0x20F4
    1a48:	86 ff       	sbrs	r24, 6
    1a4a:	71 c0       	rjmp	.+226    	; 0x1b2e <__vector_125+0x142>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1a4c:	80 91 cc 04 	lds	r24, 0x04CC
    1a50:	81 fd       	sbrc	r24, 1
    1a52:	6d c0       	rjmp	.+218    	; 0x1b2e <__vector_125+0x142>
    1a54:	c1 dc       	rcall	.-1662   	; 0x13d8 <udd_ctrl_interrupt_tc_setup>
    1a56:	81 11       	cpse	r24, r1
    1a58:	6a c0       	rjmp	.+212    	; 0x1b2e <__vector_125+0x142>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1a5a:	80 91 6b 21 	lds	r24, 0x216B
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1a62:	e9 db       	rcall	.-2094   	; 0x1236 <udd_ctrl_send_zlp_in>
    1a64:	64 c0       	rjmp	.+200    	; 0x1b2e <__vector_125+0x142>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <__vector_125+0x80>
    1a6a:	61 c0       	rjmp	.+194    	; 0x1b2e <__vector_125+0x142>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1a6c:	e5 ef       	ldi	r30, 0xF5	; 245
    1a6e:	f0 e2       	ldi	r31, 0x20	; 32
    1a70:	04 e0       	ldi	r16, 0x04	; 4
    1a72:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1a74:	ed ee       	ldi	r30, 0xED	; 237
    1a76:	f0 e2       	ldi	r31, 0x20	; 32
    1a78:	04 e0       	ldi	r16, 0x04	; 4
    1a7a:	05 93       	las	Z, r16
    1a7c:	58 c0       	rjmp	.+176    	; 0x1b2e <__vector_125+0x142>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1a7e:	80 91 cb 04 	lds	r24, 0x04CB
    1a82:	81 ff       	sbrs	r24, 1
    1a84:	4f c0       	rjmp	.+158    	; 0x1b24 <__vector_125+0x138>
		udd_ack_overflow_event();
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1a8c:	80 91 ec 20 	lds	r24, 0x20EC
    1a90:	86 ff       	sbrs	r24, 6
    1a92:	4d c0       	rjmp	.+154    	; 0x1b2e <__vector_125+0x142>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1a94:	80 91 cc 04 	lds	r24, 0x04CC
    1a98:	81 fd       	sbrc	r24, 1
    1a9a:	49 c0       	rjmp	.+146    	; 0x1b2e <__vector_125+0x142>
    1a9c:	9d dc       	rcall	.-1734   	; 0x13d8 <udd_ctrl_interrupt_tc_setup>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	46 c0       	rjmp	.+140    	; 0x1b2e <__vector_125+0x142>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1aa2:	80 91 6b 21 	lds	r24, 0x216B
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	11 f4       	brne	.+4      	; 0x1aae <__vector_125+0xc2>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    1aaa:	d3 db       	rcall	.-2138   	; 0x1252 <udd_ctrl_send_zlp_out>
    1aac:	40 c0       	rjmp	.+128    	; 0x1b2e <__vector_125+0x142>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__vector_125+0xc8>
    1ab2:	3d c0       	rjmp	.+122    	; 0x1b2e <__vector_125+0x142>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1ab4:	e5 ef       	ldi	r30, 0xF5	; 245
    1ab6:	f0 e2       	ldi	r31, 0x20	; 32
    1ab8:	04 e0       	ldi	r16, 0x04	; 4
    1aba:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1abc:	ed ee       	ldi	r30, 0xED	; 237
    1abe:	f0 e2       	ldi	r31, 0x20	; 32
    1ac0:	04 e0       	ldi	r16, 0x04	; 4
    1ac2:	05 93       	las	Z, r16
    1ac4:	34 c0       	rjmp	.+104    	; 0x1b2e <__vector_125+0x142>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1ac6:	80 e1       	ldi	r24, 0x10	; 16
    1ac8:	80 93 ca 04 	sts	0x04CA, r24
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    1acc:	0e 94 05 05 	call	0xa0a	; 0xa0a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1ad0:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    1ad4:	48 e0       	ldi	r20, 0x08	; 8
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	36 db       	rcall	.-2452   	; 0x114a <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    1ade:	48 e0       	ldi	r20, 0x08	; 8
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	80 e8       	ldi	r24, 0x80	; 128
    1ae6:	31 db       	rcall	.-2462   	; 0x114a <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1ae8:	83 e6       	ldi	r24, 0x63	; 99
    1aea:	91 e2       	ldi	r25, 0x21	; 33
    1aec:	80 93 f0 20 	sts	0x20F0, r24
    1af0:	90 93 f1 20 	sts	0x20F1, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1af4:	67 db       	rcall	.-2354   	; 0x11c4 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <__vector_125+0x142>
	}

	if (udd_is_suspend_event()) {
    1af8:	80 91 cb 04 	lds	r24, 0x04CB
    1afc:	86 ff       	sbrs	r24, 6
    1afe:	07 c0       	rjmp	.+14     	; 0x1b0e <__vector_125+0x122>
		udd_ack_suspend_event();
    1b00:	80 e4       	ldi	r24, 0x40	; 64
    1b02:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	e8 da       	rcall	.-2608   	; 0x10da <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    1b0a:	58 d1       	rcall	.+688    	; 0x1dbc <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    1b0c:	10 c0       	rjmp	.+32     	; 0x1b2e <__vector_125+0x142>
	}

	if (udd_is_resume_event()) {
    1b0e:	80 91 cb 04 	lds	r24, 0x04CB
    1b12:	85 ff       	sbrs	r24, 5
    1b14:	0c c0       	rjmp	.+24     	; 0x1b2e <__vector_125+0x142>
		udd_ack_resume_event();
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	dd da       	rcall	.-2630   	; 0x10da <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1b20:	50 d1       	rcall	.+672    	; 0x1dc2 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <__vector_125+0x142>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1b24:	80 91 cb 04 	lds	r24, 0x04CB
    1b28:	84 ff       	sbrs	r24, 4
    1b2a:	e6 cf       	rjmp	.-52     	; 0x1af8 <__vector_125+0x10c>
    1b2c:	cc cf       	rjmp	.-104    	; 0x1ac6 <__vector_125+0xda>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	bf 91       	pop	r27
    1b34:	af 91       	pop	r26
    1b36:	9f 91       	pop	r25
    1b38:	8f 91       	pop	r24
    1b3a:	7f 91       	pop	r23
    1b3c:	6f 91       	pop	r22
    1b3e:	5f 91       	pop	r21
    1b40:	4f 91       	pop	r20
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 91       	pop	r16
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	09 be       	out	0x39, r0	; 57
    1b50:	0f 90       	pop	r0
    1b52:	08 be       	out	0x38, r0	; 56
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	0f 92       	push	r0
    1b6c:	18 be       	out	0x38, r1	; 56
    1b6e:	09 b6       	in	r0, 0x39	; 57
    1b70:	0f 92       	push	r0
    1b72:	19 be       	out	0x39, r1	; 57
    1b74:	0a b6       	in	r0, 0x3a	; 58
    1b76:	0f 92       	push	r0
    1b78:	1a be       	out	0x3a, r1	; 58
    1b7a:	0b b6       	in	r0, 0x3b	; 59
    1b7c:	0f 92       	push	r0
    1b7e:	1b be       	out	0x3b, r1	; 59
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	2f 93       	push	r18
    1b86:	3f 93       	push	r19
    1b88:	4f 93       	push	r20
    1b8a:	5f 93       	push	r21
    1b8c:	6f 93       	push	r22
    1b8e:	7f 93       	push	r23
    1b90:	8f 93       	push	r24
    1b92:	9f 93       	push	r25
    1b94:	af 93       	push	r26
    1b96:	bf 93       	push	r27
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1ba0:	80 91 cc 04 	lds	r24, 0x04CC
    1ba4:	81 fd       	sbrc	r24, 1
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1ba8:	17 dc       	rcall	.-2002   	; 0x13d8 <udd_ctrl_interrupt_tc_setup>
    1baa:	81 11       	cpse	r24, r1
    1bac:	a9 c0       	rjmp	.+338    	; 0x1d00 <__vector_126+0x1a2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1bb4:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1bb8:	81 95       	neg	r24
    1bba:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1bbc:	ec ee       	ldi	r30, 0xEC	; 236
    1bbe:	f0 e2       	ldi	r31, 0x20	; 32
    1bc0:	e8 1b       	sub	r30, r24
    1bc2:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1bc4:	20 81       	ld	r18, Z
    1bc6:	31 81       	ldd	r19, Z+1	; 0x01
    1bc8:	2c 5e       	subi	r18, 0xEC	; 236
    1bca:	30 42       	sbci	r19, 0x20	; 32
    1bcc:	36 95       	lsr	r19
    1bce:	27 95       	ror	r18
    1bd0:	36 95       	lsr	r19
    1bd2:	27 95       	ror	r18
    1bd4:	36 95       	lsr	r19
    1bd6:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1bd8:	82 2f       	mov	r24, r18
    1bda:	86 95       	lsr	r24
    1bdc:	20 ff       	sbrs	r18, 0
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <__vector_126+0x86>
    1be0:	c0 e8       	ldi	r28, 0x80	; 128
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <__vector_126+0x88>
    1be4:	c0 e0       	ldi	r28, 0x00	; 0
    1be6:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1be8:	8c 2f       	mov	r24, r28
    1bea:	96 da       	rcall	.-2772   	; 0x1118 <udd_ep_get_ctrl>
    1bec:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1bee:	80 81       	ld	r24, Z
    1bf0:	85 ff       	sbrs	r24, 5
    1bf2:	86 c0       	rjmp	.+268    	; 0x1d00 <__vector_126+0x1a2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1bf4:	00 e2       	ldi	r16, 0x20	; 32
    1bf6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1bf8:	c1 11       	cpse	r28, r1
    1bfa:	7c c0       	rjmp	.+248    	; 0x1cf4 <__vector_126+0x196>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1bfc:	80 91 6b 21 	lds	r24, 0x216B
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <__vector_126+0xac>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1c04:	30 db       	rcall	.-2464   	; 0x1266 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1c06:	de da       	rcall	.-2628   	; 0x11c4 <udd_ctrl_init>
    1c08:	7b c0       	rjmp	.+246    	; 0x1d00 <__vector_126+0x1a2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1c0a:	c0 91 ee 20 	lds	r28, 0x20EE
    1c0e:	d0 91 ef 20 	lds	r29, 0x20EF

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1c12:	80 91 82 21 	lds	r24, 0x2182
    1c16:	90 91 83 21 	lds	r25, 0x2183
    1c1a:	00 91 6e 21 	lds	r16, 0x216E
    1c1e:	10 91 6f 21 	lds	r17, 0x216F
    1c22:	98 01       	movw	r18, r16
    1c24:	2c 0f       	add	r18, r28
    1c26:	3d 1f       	adc	r19, r29
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	18 f4       	brcc	.+6      	; 0x1c34 <__vector_126+0xd6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1c2e:	ec 01       	movw	r28, r24
    1c30:	c0 1b       	sub	r28, r16
    1c32:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1c34:	20 91 80 21 	lds	r18, 0x2180
    1c38:	30 91 81 21 	lds	r19, 0x2181
    1c3c:	20 0f       	add	r18, r16
    1c3e:	31 1f       	adc	r19, r17
    1c40:	83 e6       	ldi	r24, 0x63	; 99
    1c42:	91 e2       	ldi	r25, 0x21	; 33
    1c44:	4c 2f       	mov	r20, r28
    1c46:	5d 2f       	mov	r21, r29
    1c48:	68 2f       	mov	r22, r24
    1c4a:	79 2f       	mov	r23, r25
    1c4c:	82 2f       	mov	r24, r18
    1c4e:	93 2f       	mov	r25, r19
    1c50:	e4 d0       	rcall	.+456    	; 0x1e1a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1c52:	0c 0f       	add	r16, r28
    1c54:	1d 1f       	adc	r17, r29
    1c56:	00 93 6e 21 	sts	0x216E, r16
    1c5a:	10 93 6f 21 	sts	0x216F, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1c5e:	28 97       	sbiw	r28, 0x08	; 8
    1c60:	69 f4       	brne	.+26     	; 0x1c7c <__vector_126+0x11e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1c62:	80 91 6c 21 	lds	r24, 0x216C
    1c66:	90 91 6d 21 	lds	r25, 0x216D
    1c6a:	80 0f       	add	r24, r16
    1c6c:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1c6e:	20 91 7e 21 	lds	r18, 0x217E
    1c72:	30 91 7f 21 	lds	r19, 0x217F
    1c76:	82 17       	cp	r24, r18
    1c78:	93 07       	cpc	r25, r19
    1c7a:	88 f0       	brcs	.+34     	; 0x1c9e <__vector_126+0x140>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1c7c:	00 93 82 21 	sts	0x2182, r16
    1c80:	10 93 83 21 	sts	0x2183, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1c84:	e0 91 86 21 	lds	r30, 0x2186
    1c88:	f0 91 87 21 	lds	r31, 0x2187
    1c8c:	30 97       	sbiw	r30, 0x00	; 0
    1c8e:	29 f0       	breq	.+10     	; 0x1c9a <__vector_126+0x13c>
			if (!udd_g_ctrlreq.over_under_run()) {
    1c90:	19 95       	eicall
    1c92:	81 11       	cpse	r24, r1
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <__vector_126+0x13c>
				// Stall ZLP
				udd_ctrl_stall_data();
    1c96:	c1 da       	rcall	.-2686   	; 0x121a <udd_ctrl_stall_data>
    1c98:	33 c0       	rjmp	.+102    	; 0x1d00 <__vector_126+0x1a2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1c9a:	cd da       	rcall	.-2662   	; 0x1236 <udd_ctrl_send_zlp_in>
    1c9c:	31 c0       	rjmp	.+98     	; 0x1d00 <__vector_126+0x1a2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1c9e:	80 91 82 21 	lds	r24, 0x2182
    1ca2:	90 91 83 21 	lds	r25, 0x2183
    1ca6:	08 17       	cp	r16, r24
    1ca8:	19 07       	cpc	r17, r25
    1caa:	f9 f4       	brne	.+62     	; 0x1cea <__vector_126+0x18c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1cac:	e0 91 86 21 	lds	r30, 0x2186
    1cb0:	f0 91 87 21 	lds	r31, 0x2187
    1cb4:	30 97       	sbiw	r30, 0x00	; 0
    1cb6:	11 f4       	brne	.+4      	; 0x1cbc <__vector_126+0x15e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1cb8:	b0 da       	rcall	.-2720   	; 0x121a <udd_ctrl_stall_data>
    1cba:	22 c0       	rjmp	.+68     	; 0x1d00 <__vector_126+0x1a2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1cbc:	19 95       	eicall
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <__vector_126+0x168>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1cc2:	ab da       	rcall	.-2730   	; 0x121a <udd_ctrl_stall_data>
    1cc4:	1d c0       	rjmp	.+58     	; 0x1d00 <__vector_126+0x1a2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1cc6:	20 91 6c 21 	lds	r18, 0x216C
    1cca:	30 91 6d 21 	lds	r19, 0x216D
    1cce:	80 91 6e 21 	lds	r24, 0x216E
    1cd2:	90 91 6f 21 	lds	r25, 0x216F
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	80 93 6c 21 	sts	0x216C, r24
    1cde:	90 93 6d 21 	sts	0x216D, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1ce2:	10 92 6e 21 	sts	0x216E, r1
    1ce6:	10 92 6f 21 	sts	0x216F, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1cea:	ec ee       	ldi	r30, 0xEC	; 236
    1cec:	f0 e2       	ldi	r31, 0x20	; 32
    1cee:	02 e0       	ldi	r16, 0x02	; 2
    1cf0:	06 93       	lac	Z, r16
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <__vector_126+0x1a2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1cf4:	c0 38       	cpi	r28, 0x80	; 128
    1cf6:	11 f4       	brne	.+4      	; 0x1cfc <__vector_126+0x19e>
		udd_ctrl_in_sent();
    1cf8:	be da       	rcall	.-2692   	; 0x1276 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <__vector_126+0x1a2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1cfc:	8c 2f       	mov	r24, r28
    1cfe:	d9 db       	rcall	.-2126   	; 0x14b2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	0f 90       	pop	r0
    1d22:	0b be       	out	0x3b, r0	; 59
    1d24:	0f 90       	pop	r0
    1d26:	0a be       	out	0x3a, r0	; 58
    1d28:	0f 90       	pop	r0
    1d2a:	09 be       	out	0x39, r0	; 57
    1d2c:	0f 90       	pop	r0
    1d2e:	08 be       	out	0x38, r0	; 56
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	irq_initialize_vectors();
    1d3a:	87 e0       	ldi	r24, 0x07	; 7
    1d3c:	e0 ea       	ldi	r30, 0xA0	; 160
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    1d42:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1d44:	10 92 72 21 	sts	0x2172, r1
    1d48:	10 92 73 21 	sts	0x2173, r1
    1d4c:	10 92 74 21 	sts	0x2174, r1
    1d50:	10 92 75 21 	sts	0x2175, r1
    1d54:	10 92 76 21 	sts	0x2176, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	80 93 77 21 	sts	0x2177, r24

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
    1d5e:	0e 94 c0 01 	call	0x380	; 0x380 <sysclk_init>
	board_init();
    1d62:	63 d9       	rcall	.-3386   	; 0x102a <board_init>
	ui_init();
    1d64:	0e 94 25 01 	call	0x24a	; 0x24a <ui_init>
	ui_powerdown();
    1d68:	0e 94 26 01 	call	0x24c	; 0x24c <ui_powerdown>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    1d6c:	0e 94 03 05 	call	0xa06	; 0xa06 <udc_start>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1d70:	c2 e7       	ldi	r28, 0x72	; 114
    1d72:	d1 e2       	ldi	r29, 0x21	; 33
    1d74:	83 e7       	ldi	r24, 0x73	; 115
    1d76:	91 e2       	ldi	r25, 0x21	; 33
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    1d78:	a8 e4       	ldi	r26, 0x48	; 72
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1d7c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1d7e:	28 81       	ld	r18, Y
    1d80:	21 11       	cpse	r18, r1
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <main+0x58>
    1d84:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1d86:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1d88:	31 91       	ld	r19, Z+
    1d8a:	33 23       	and	r19, r19
    1d8c:	e1 f3       	breq	.-8      	; 0x1d86 <main+0x4c>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    1d8e:	21 11       	cpse	r18, r1
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <main+0x5c>
		cpu_irq_enable();
    1d92:	78 94       	sei
    1d94:	f3 cf       	rjmp	.-26     	; 0x1d7c <main+0x42>
    1d96:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    1d98:	e2 2f       	mov	r30, r18
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	e1 50       	subi	r30, 0x01	; 1
    1d9e:	f0 4e       	sbci	r31, 0xE0	; 224
    1da0:	23 2f       	mov	r18, r19
    1da2:	21 7f       	andi	r18, 0xF1	; 241
    1da4:	30 81       	ld	r19, Z
    1da6:	23 2b       	or	r18, r19
    1da8:	2c 93       	st	X, r18
	sleep_enable();
    1daa:	2c 91       	ld	r18, X
    1dac:	21 60       	ori	r18, 0x01	; 1
    1dae:	2c 93       	st	X, r18

	cpu_irq_enable();
    1db0:	78 94       	sei
	sleep_enter();
    1db2:	88 95       	sleep

	sleep_disable();
    1db4:	2c 91       	ld	r18, X
    1db6:	2e 7f       	andi	r18, 0xFE	; 254
    1db8:	2c 93       	st	X, r18
    1dba:	e0 cf       	rjmp	.-64     	; 0x1d7c <main+0x42>

00001dbc <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    1dbc:	0c 94 26 01 	jmp	0x24c	; 0x24c <ui_powerdown>
    1dc0:	08 95       	ret

00001dc2 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    1dc2:	0c 94 29 01 	jmp	0x252	; 0x252 <ui_wakeup>
    1dc6:	08 95       	ret

00001dc8 <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_kbd_enable)
    1dc8:	80 91 71 21 	lds	r24, 0x2171
    1dcc:	88 23       	and	r24, r24
    1dce:	19 f0       	breq	.+6      	; 0x1dd6 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    1dd0:	fe dc       	rcall	.-1540   	; 0x17ce <udd_get_frame_number>
    1dd2:	0c 94 2a 01 	jmp	0x254	; 0x254 <ui_process>
    1dd6:	08 95       	ret

00001dd8 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void)
{
	ui_wakeup_enable();
    1dd8:	0c 94 27 01 	jmp	0x24e	; 0x24e <ui_wakeup_enable>
    1ddc:	08 95       	ret

00001dde <main_remotewakeup_disable>:
}

void main_remotewakeup_disable(void)
{
	ui_wakeup_disable();
    1dde:	0c 94 28 01 	jmp	0x250	; 0x250 <ui_wakeup_disable>
    1de2:	08 95       	ret

00001de4 <main_kbd_enable>:
}

bool main_kbd_enable(void)
{
	main_b_kbd_enable = true;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 71 21 	sts	0x2171, r24
	return true;
}
    1dea:	08 95       	ret

00001dec <main_kbd_disable>:

void main_kbd_disable(void)
{
	main_b_kbd_enable = false;
    1dec:	10 92 71 21 	sts	0x2171, r1
    1df0:	08 95       	ret

00001df2 <__udivmodhi4>:
    1df2:	aa 1b       	sub	r26, r26
    1df4:	bb 1b       	sub	r27, r27
    1df6:	51 e1       	ldi	r21, 0x11	; 17
    1df8:	07 c0       	rjmp	.+14     	; 0x1e08 <__udivmodhi4_ep>

00001dfa <__udivmodhi4_loop>:
    1dfa:	aa 1f       	adc	r26, r26
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	a6 17       	cp	r26, r22
    1e00:	b7 07       	cpc	r27, r23
    1e02:	10 f0       	brcs	.+4      	; 0x1e08 <__udivmodhi4_ep>
    1e04:	a6 1b       	sub	r26, r22
    1e06:	b7 0b       	sbc	r27, r23

00001e08 <__udivmodhi4_ep>:
    1e08:	88 1f       	adc	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	5a 95       	dec	r21
    1e0e:	a9 f7       	brne	.-22     	; 0x1dfa <__udivmodhi4_loop>
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	08 95       	ret

00001e1a <memcpy>:
    1e1a:	fb 01       	movw	r30, r22
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <memcpy+0xa>
    1e20:	01 90       	ld	r0, Z+
    1e22:	0d 92       	st	X+, r0
    1e24:	41 50       	subi	r20, 0x01	; 1
    1e26:	50 40       	sbci	r21, 0x00	; 0
    1e28:	d8 f7       	brcc	.-10     	; 0x1e20 <memcpy+0x6>
    1e2a:	08 95       	ret

00001e2c <_exit>:
    1e2c:	f8 94       	cli

00001e2e <__stop_program>:
    1e2e:	ff cf       	rjmp	.-2      	; 0x1e2e <__stop_program>
